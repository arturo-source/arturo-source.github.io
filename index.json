[{"content":"Surely it has happened to you at least once that you executed rm file.txt, but in reality, you didn\u0026rsquo;t want to delete that file\u0026hellip; The problem is that the terminal doesn\u0026rsquo;t have a trash bin; thus, the file can\u0026rsquo;t be recovered, or maybe it can\u0026hellip;\nFirst of all, you need to know that when you delete a file, the 0s and 1s remain on the hard drive, meaning not everything is lost.\nMethods to recover a deleted file I think it\u0026rsquo;s obvious, but if you deleted it conventionally, have you tried recovering it from the trash?\nIf you deleted it using the rm command, or even if it was in the trash and you emptied it, there is specialized free software for this, such as foremost, ext4magic, or extundelete.\nBut the method I\u0026rsquo;m going to teach you next is undoubtedly the best because of its ease, simplicity, and elegance. Have you ever used the grep tool? If the answer is \u0026lsquo;yes\u0026rsquo;, you\u0026rsquo;re halfway done.\nRecovering a deleted file using grep In case you don\u0026rsquo;t know it, grep is a tool for finding patterns. Try the following example:\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; names.txt Charlie Arthur John Oliver EOF grep \u0026#39;r\u0026#39; names.txt You will have created a file called names.txt, and with grep you listed all the lines containing the letter r. You can add options to the grep command, for example -A (after) and -B (before):\ngrep -A 1 \u0026#39;u\u0026#39; names.txt With this option, you listed the names containing the letter u and the one that follows.\nAnd now comes what you wouldn\u0026rsquo;t expect from grep: you can not only search within files but also search within devices, for example, your entire hard drive, or your USB. As I mentioned earlier, although you\u0026rsquo;ve deleted your file, the bytes are still on the hard drive, but your operating system doesn\u0026rsquo;t know where they are.\nIf the file was on the hard drive, find out which one it is. In Linux, disks are located at /dev/. If it\u0026rsquo;s an SSD, the name will start with /dev/nvme...; whereas if it\u0026rsquo;s an HDD, it will be /dev/sd.... And a USB will likely have a name similar to the HDD.\nHave you found the device? Now you need to remember something that was in the file. I\u0026rsquo;ll use \u0026ldquo;some content on the file\u0026rdquo;:\ngrep -a -A 200 -B 100 \u0026#39;some content on the file\u0026#39; /dev/nvme0n1 After several minutes (depending on the read speed of the device), the content of the file will appear on your terminal! 100 lines above and 200 below the pattern you wrote.\nHow to completely delete a file? Now I imagine that, like when I discovered this, you\u0026rsquo;re wondering: so, how do I really delete a file?! The answer is easy: fill it with zeros. I\u0026rsquo;ll show you two Linux commands you can use:\ndd if=/dev/zero of=file.txt bs=1M rm file.txt And if instead of zeros, you want to write random numbers:\nshred -u file.txt ","permalink":"https://arturo-source.github.io/posts/how-to-restore-deleted-file-linux/","summary":"You have deleted a file from the terminal, and you don\u0026rsquo;t know how to recover it\u0026hellip; Luckily, now I\u0026rsquo;m going to tell you the definitive trick.","title":"How to restore a deleted file in Linux"},{"content":"A web server is software that implements the HTTP protocol. Typically, it is accessed using a web browser (Chrome, Firefox, etc.). Being a standard, there are multiple implementations of web servers: Apache and Nginx are the most well-known and widely used.\nHow to Use Your Own Web Server? Later, you will see how to create your own, but the most common scenario is that you want to use an existing one. Although Apache and Nginx are the most used, I recommend using Caddy, as the configuration of the former two can be tedious.\nInstall Caddy; the process will vary depending on your operating system. Now, create a configuration file named Caddyfile:\nhttp://localhost:8080 root * ./my-website file_server Next, create some static content. Although the previously mentioned servers can execute code (for example PHP), the content that your browser understands is HTML. Create a folder my-website next to the Caddyfile, and create the HTML file ./my-website/index.html:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My first web server\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Finally, run caddy start, and access your browser at http://localhost:8080/. You should see \u0026ldquo;Hello world!\u0026rdquo; in your browser.\nHow Does It Work? I recommend using curl instead of a browser to see what\u0026rsquo;s happening at a low level:\ncurl http://localhost:8080 -v The terminal output will look something like this:\n* Host localhost:8080 was resolved. * IPv6: ::1 * IPv4: 127.0.0.1 * Trying [::1]:8080... * Connected to localhost (::1) port 8080 * using HTTP/1.x \u0026gt; GET / HTTP/1.1 \u0026gt; Host: localhost:8080 \u0026gt; User-Agent: curl/8.11.1 \u0026gt; Accept: */* \u0026gt; * Request completely sent off What you see with the \u0026gt; symbol are the bytes that curl sends to your server.\n\u0026lt; HTTP/1.1 200 OK \u0026lt; Accept-Ranges: bytes \u0026lt; Content-Length: 149 \u0026lt; Content-Type: text/html; charset=utf-8 \u0026lt; Etag: \u0026#34;sqpjdl45\u0026#34; \u0026lt; Last-Modified: Sun, 26 Jan 2025 18:00:57 GMT \u0026lt; Server: Caddy \u0026lt; Date: Sun, 26 Jan 2025 18:14:31 GMT \u0026lt; ...here goes your html... * Connection #0 to host localhost left intact What you see with the \u0026lt; symbol are the bytes that the server has responded with. The HTTP protocol works as follows, as you may have noticed, the request consists of:\nFirst line: verb - route - HTTP version (the verb can be GET, POST, PUT, etc.). One header per line (name, colon, value). Double newline. Body of the request (not visible because GET requests do not have a body). Double newline (if you had included a body). Newlines are important because they indicate the end of a section, but to be sure where the body ends, you must use the Content-Length header, as seen in the response.\nAnd the response will look something similar:\nFirst line: HTTP version - code - explanation. One header per line (name, colon, value). Double newline. Body of the response (in this case, it\u0026rsquo;s HTML, but it could be another type of content). Double newline. Create Your First Web Server From Scratch If you understood the previous point, you are ready to create your own web server. This is not necessary in 99% of cases, as you usually want an existing server, but it is an interesting exercise to undertake.\nThe following is a very basic example of how I would program a web server using Go. I only consider the best-case scenario, where the request is correct, but obviously all cases should be considered. I encourage you to do the same in another language and expand upon it to see if you understand the concepts.\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net\u0026#34; \u0026#34;strings\u0026#34; ) func main() { listener, err := net.Listen(\u0026#34;tcp\u0026#34;, \u0026#34;:8080\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error starting:\u0026#34;, err) return } defer listener.Close() fmt.Println(\u0026#34;Server listening on http://localhost:8080\u0026#34;) for { conn, err := listener.Accept() if err != nil { fmt.Println(\u0026#34;Error accepting connection:\u0026#34;, err) continue } go handleConnection(conn) } } func handleConnection(conn net.Conn) { defer conn.Close() reader := bufio.NewReader(conn) requestLine, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil { fmt.Println(\u0026#34;Error reading the request:\u0026#34;, err) return } requestParts := strings.Split(strings.TrimSpace(requestLine), \u0026#34; \u0026#34;) if len(requestParts) \u0026lt; 3 { fmt.Println(\u0026#34;Malformed request:\u0026#34;, requestLine) return } method, path, httpVersion := requestParts[0], requestParts[1], requestParts[2] fmt.Printf(\u0026#34;Request received: %s %s %s\\n\u0026#34;, method, path, httpVersion) for { line, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil || line == \u0026#34;\\r\\n\u0026#34; { break } } responseBody := \u0026#34;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;My first web server\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34; response := fmt.Sprintf(\u0026#34;%s 200 OK\\r\\n\u0026#34;, httpVersion) + \u0026#34;Content-Type: text/html\\r\\n\u0026#34; + fmt.Sprintf(\u0026#34;Content-Length: %d\\r\\n\u0026#34;, len(responseBody)) + \u0026#34;\\r\\n\u0026#34; + responseBody _, err = conn.Write([]byte(response)) if err != nil { fmt.Println(\u0026#34;Error sending response:\u0026#34;, err) } } To check if it\u0026rsquo;s working, run your program, in this case go run main.go, and enter your browser at http://localhost:8080/. You should see the same webpage as before. Try using curl and compare the differences with Caddy.\n","permalink":"https://arturo-source.github.io/posts/what-is-web-server/","summary":"You use it every day, and now you\u0026rsquo;ll learn what it is, from the very basics.","title":"What is a web server?"},{"content":"What is a reverse tunnel? A reverse tunnel is a technique that allows your server to access resources on your local computer. Even if you don\u0026rsquo;t have a public IP, or you are behind a NAT. Additionally, by creating a tunnel via SSH, your computer\u0026rsquo;s local resources are accessed by the server in an encrypted manner.\nMaybe what you are looking for is to create a normal tunnel, and not a reverse one, and I explain this in this other article.\nWhat is the difference between a normal SSH tunnel and a reverse tunnel? With a normal tunnel you can access server resources, even if they are private. Or use the server as a proxy, to access resources that you cannot from your computer.\nA reverse tunnel is just the opposite, the server is the one that accesses your resources. An example could be accessing your Raspberry Pi from outside your home, you would have to run a reverse SSH from your Raspberry Pi to a server with a public IP. Then, you could connect to the server with public IP via SSH, and within it, connect to your Raspberry Pi, using SSH again.\nYou could even use your Raspberry Pi as a proxy, through which the server can connect to a file server that you have hosted at home.\nHow do you create a reverse tunnel? The command is very simple, once you understand it:\nssh -N -R localhost:8888:fileserver.home:80 user@server.com The -N option runs SSH non-interactively, because we don\u0026rsquo;t need to open a shell on server.com. Try not to put it on and you will understand. The -R option is what creates the reverse tunnel. Followed by it we will configure the tunnel. localhost:8888 is where the server will call, to connect to the Raspberry. Try removing localhost, and leaving only 8888:fileserver.home:80, it should work the same. fileserver.home:80 is where I have my home file server running (my router resolves fileserver.home to the IP of my home file server). And user@server.com is what we always use in SSH to access, the name of your user, at, and the domain name (or IP) of the server. If you now access the remote server with ssh user@server.com, you can run curl localhost:8888, you will see that you get a response from home. Of course, if you had a process running on port 8888 on your server, use change localhost:8888 to one that is free.\nIf you don\u0026rsquo;t want to access a device in your home, but directly to your Raspberry Pi (via VNC, for example), run the following:\nssh -N -R localhost:8888:localhost:5901 user@server.com By changing fileserver.home:80 to localhost:5901, you are telling the server that it can access your VNC service within the Raspberry Pi, through localhost:8888.\n","permalink":"https://arturo-source.github.io/posts/ssh-reverse-tunneling/","summary":"Understand what a reverse SSH tunnel is, how to configure it, and what the difference is from a normal tunnel.","title":"What is SSH Reverse Tunneling, and how to set it up"},{"content":"What is an SSH tunnel? SSH is an application to communicate with other computers in an encrypted way. Normally you connect to the server with ssh user@public.site, but using the -L parameter will create a tunnel through the server.\nAnd what is an SSH tunnel? Well, like a real-life tunnel, a tunnel communicates point A, and point B. Point A is your computer, and point B is NOT the public.site server, but the site you want to reach, let\u0026rsquo;s say private.site. That is, public.site is not point B, but rather the tunnel!\nIf what you want is to know how to make a reverse tunnel, I explain it in this other article.\nWhat is the use of the SSH tunnel? The functionality of an SSH tunnel is very similar to that of a VPN, it allows us to make requests to private.site pretending that we are public.site. As with a VPN, our connection is encrypted. And, in addition, we can bypass port restrictions by the firewall, since we are accessing through an open SSH port.\nHow do I create an SSH tunnel? The command is very simple, once you understand it:\nssh -N -L localhost:8000:private.site:80 user@public.site The -N option runs SSH non-interactively, because we don\u0026rsquo;t need to open a shell on public.site. Try not to put it on and you will understand. The -L option is what creates the tunnel. Followed by it we will configure the tunnel. localhost:8000 is where we are going to place the origin of the tunnel (point A through which we are going to enter). Try removing localhost, and leaving only 8000:private.site:80, it should work the same. private.site:80 is where we are going to place the destination of the tunnel (point B, where we want to reach with the tunnel). And user@public.site is what we always use in SSH to access, the name of your user, at, and the domain name (or IP) of the server. If you now open a browser, and type http://localhost:8000, you should watch private.site, although normally you couldn\u0026rsquo;t, either due to restrictions in your country, or because it is a site not accessible from a public network .\nIf what you want is to access a port within public.site that is not public, and is closed by the firewall, you can do the same, but changing private.site, for localhost:\nssh -N -L localhost:1234:localhost:1234 user@public.site You should now be able to access the service on port public.site:1234 from localhost:1234.\n","permalink":"https://arturo-source.github.io/posts/ssh-tunneling/","summary":"Understand SSH tunnels and set up your first tunnel in a couple of minutes.","title":"What is and how to set up SSH Tunneling"},{"content":"To connect to a server, you would normally use ssh user@domain.com, and to copy a file scp file.txt user@domain.com:/home/user/. After running the command, it will ask you for the user password, but this is insecure and cumbersome. The correct way is to use a public-private key pair, and that way you won\u0026rsquo;t have to re-enter the password.\nGenerate SSH keys The first step is to open your terminal and type ssh-keygen. This command accepts some configuration commands like ssh-keygen -t rsa to choose the encryption system (you can choose from dsa, ecdsa, ecdsa-sk, ed25519, ed25519-sk, rsa). The following prompt will appear:\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/arturo/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/arturo/.ssh/id_rsa Your public key has been saved in /home/arturo/.ssh/id_rsa.pub The key fingerprint is: SHA256:xJM27ZnRIMl/OSWA1B8H9cPDN4lSKGa8QKXs3VA3pmY arturo@localhost The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | .+==oooB. | | .o=Oo+B B..| | o@o=E.B Bo| | .o.=*+* =| | .S.+o . | | | | | | | | | +----[SHA256]-----+ The \u0026ldquo;randomart image\u0026rdquo; will vary, since the key that has been generated is different each time it is run. You can change the prompt values, such as the path where the key is saved. In this case, my public and private keys have been stored in /home/arturo/.ssh/ (shortened ~/.ssh/), with the name id_rsa.pub and id_rsa.\nLog in to the server without using a password The second (and last) step is to make the server identify you. To do this, you will have to copy your public key ~/.ssh/id_rsa.pub to the server. The easiest way to do this is ssh-copy-id -i ~/.ssh/id_rsa.pub user@domain.com. The following prompt will appear in which you have to enter the user password:\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \u0026#34;/home/arturo/.ssh/id_rsa.pub\u0026#34; /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@172.21.0.2\u0026#39;s password: Simply enter the password for user and you can access the server simply with ssh user@domain.com, without having to type the password.\nAlternative without ssh-copy-id An alternative way, if you don\u0026rsquo;t want to (or can\u0026rsquo;t) use ssh-copy-id, is to copy your public key manually to the server. To do this, you will have to copy the content of ~/.ssh/id_rsa.pub, to see it open it, or run cat ~/.ssh/id_rsa.pub:\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDCY+hLD34jAoCrin5sRN1mclVxhaykt0pRdvsLxFJxypkwALqb18nx3ryYNNKygWnpmR4hmD19wHGVZZi7nUrgUcMbES03RvOdigIasfgjGR/dijs3b+HhEZ+iyJJjkOQumEm+0en4lKsh8nWecrb6FsMLRXBvPsB5lhr4bu15dP7/Ui/55LRyP/6MpszhQufS6xlaWXa2lY1dRPY/XDuWE+datnsZAPqn6KM2TQOQAvo1IPj3lwShMLuyzEfwSMQKBM+y+ltu0k/ogra1pk+PRcGEqEnjkojTmS/tigOoa9u+Zo4CDBCsTjZViaFI6aRs/+FHmfrmlWz91J1dleMhp8feIlsfhnwAFRvRvd6yYzY8N10MnixwRjw1cyNDwJgBojmjfHsz879KtkF4lQ934e1nXIrIPos7thT7tx0e4TEpmNZiB5XpIPZe8AERzyYTNqFN9pOVRIlelakjATKxrjiiNZTVJrbcMA7yIXb8BgW0kyJb1AZgSUFqcpOsLQE= arturo@localhost So, access the server, you may have a way to access without SSH, because some VPS providers will allow you to access in other ways. Otherwise, simply ssh user@domain.com. Open the file /home/user/.ssh/authorized_keys (shortened ~/.ssh/authorized_keys), or create it if it does not exist, by running nano ~/.ssh/authorized_keys.\nFinally, paste the content you just copied. You should now be able to access the server with ssh user@domain.com from your machine.\nAdd more security Generally, you don\u0026rsquo;t want users to access your domain.com server using SSH with a password. This could cause you to suffer SSH attacks to try to compromise the server. To do this, simply open the file with nano /etc/ssh/sshd_config, look for the line where it says PasswordAuthentication, remove the hash, and type PasswordAuthentication no.\n","permalink":"https://arturo-source.github.io/posts/connect-ssh-without-password/","summary":"Never retype an insecure password to log in via SSH. Learn to use public-private keys.","title":"How to connect to a server SSH without password"},{"content":"The goal of this article is to convert my terminal application poker-odds, into an application that can be used in the browser.\nFor this example I will use tinygo, which is a Go compiler for microprocessors, which also produces WASM code. If you want to see how it\u0026rsquo;s done with the regular Go compiler, you can see it on the Go wiki.\nCompile Go code Remember to have the tinygo compiler installed. To compile the Go code to WASM code, I will use the following command:\ntinygo build -o wasm.wasm -target wasm ./main.go tinygo is the compiler. build is used to compile the code. -o wasm.wasm I tell you where I want the compiled WASM to be saved. -target wasm I indicate that I want to compile to WASM, and not to a microprocessor. ./main.go is where the Go code is. Inside the ./main.go file, I will have code like the following:\npackage main func main() {} //export multiply func multiply(x, y int) int { return x * y; } The //export multiply comment is very important. Without it, you won\u0026rsquo;t be able to run the function from JavaScript.\nRun Go code from JavaScript Once the code has been compiled, you have to load the code in the browser, the easiest way is to create an index.html.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;/wasm_exec.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const go = new Go(); // Defined in wasm_exec.js const WASM_URL = \u0026#39;/wasm.wasm\u0026#39;; var wasm; if (\u0026#39;instantiateStreaming\u0026#39; in WebAssembly) { WebAssembly.instantiateStreaming(fetch(WASM_URL), go.importObject).then(function (obj) { wasm = obj.instance; go.run(wasm); }) } else { fetch(WASM_URL).then(resp =\u0026gt; resp.arrayBuffer() ).then(bytes =\u0026gt; WebAssembly.instantiate(bytes, go.importObject).then(function (obj) { wasm = obj.instance; go.run(wasm); }) ) } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Two scripts remain visible. The first loads a wasm_exec.js file. It\u0026rsquo;s important, because it\u0026rsquo;s what allows you to execute const go = new Go(); later. You can find this file within your operating system by running the following command in Linux:\nfind / -name wasm_exec.js This command will search for all the files on your operating system called wasm_exec.js. I will copy it to the same folder as my index.html.\nYou\u0026rsquo;ll also find it at https://github.com/tinygo-org/tinygo/blob/release/targets/wasm_exec.js, but you may have problems if the GitHub version of tinygo is not the same as yours. .\nStart an HTTP server There are multiple ways to have an HTTP server quickly. Open a terminal, and go to the folder where you have wasm_exec.js, index.html, and wasm.wasm.\nWith interpreted languages like python you can simply put python -m http.server 8000. For PHP php -S 127.0.0.1:8000. Either command will open an HTTP server on port 8000, but if you prefer to build a small server with Go, copy the following:\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { port := flag.String(\u0026#34;p\u0026#34;, \u0026#34;8000\u0026#34;, \u0026#34;port to serve\u0026#34;) directory := flag.String(\u0026#34;d\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;directory to host\u0026#34;) flag.Parse() http.Handle(\u0026#34;/\u0026#34;, http.FileServer(http.Dir(*directory))) log.Printf(\u0026#34;Serving %s on: http://127.0.0.1:%s\\n\u0026#34;, *directory, *port) log.Fatal(http.ListenAndServe(\u0026#34;:\u0026#34;+*port, nil)) } Compile the code with go build, and run it. Remember that you can change the -p options to change the port, and -d for the folder you want to serve.\nNow, let\u0026rsquo;s multiply using Go from JavaScript After a long process, I can now run the WASM code. I enter the url http://127.0.0.1:8000/, a blank page appears, but if I open the developer tools (by pressing F12, ctrl + shift + i, or whatever is done in your browser/operating system). And in the JavaScript terminal I type wasm.exports.multiply(4,5), and the function returns 20.\nCreate the poker-odds tool in HTML Now I have a function that multiplies in Go, which can be called from JavaScript, using WASM. It doesn\u0026rsquo;t have to be that difficult to port my code. The first thing I\u0026rsquo;m going to do is fork my repository, because the application is completely designed to be used from the terminal, so quite a few things will have to change. This is the new repository that will work with WASM.\nFork poker-odds To do the fork, I had to create a repository from scratch (because you can\u0026rsquo;t fork your own repositories), clone the original repository, change the remote origin url, and push to the new repository. With the following commands:\ngit clone git@github.com:arturo-source/poker-odds.git poker-odds-wasm cd poker-odds-wasm/ git remote -v # show old repositories git remote set-url origin git@github.com:arturo-source/poker-odds-wasm.git git push -u origin main Modify the program to work with WASM The strategy I am going to follow is that the Go program itself returns the HTML. Another option would be to run the logic in Go, return the result to JavaScript, and manipulate the DOM to insert the data.\nThe latter is usually recommended because manipulating the DOM with WASM is more expensive than with JavaScript, but I have found incompatibilities between Go and WASM that do not allow me to port some functions made in Go, so that they are executed in JS (for example, in Go a function can return multiple values, and when you compile it to WASM it doesn\u0026rsquo;t work).\nAn advantage of creating the HTML from Go is that the state of the application is maintained in Go, in JavaScript I will only make a function to embed the HTML. Managing state from Go makes the program logic simpler.\nThe modifications will be the following:\nDelete the file console.go (contains how to print or read the console). Extract the func main into a func getResultsInHTML to be able to export it, and be able to use it through WASM. Use func parseCommandLine logic to parse user input with func parseUserInputs. Use an HTML template that emits a result similar to func printResults. Once I have programmed these changes, it is time to compile, I run tinygo build -o wasm.wasm -target wasm ./main.go again, I insert the wasm.wasm into the HTML as I did with the example to multiply, and\u0026hellip;\nWTF!? It does not work After all this time adapting the program, I get the error panic: unimplemented: (reflect.Type).NumOut(). I already suspected that the tinygo compiler would not be as complete as the go one, but I can still try the official compiler.\nFor your information, this is the error I\u0026rsquo;m getting:\nUncaught RuntimeError: unreachable at runtime._panic (wasm.wasm:0x2b2a) at (poker-odds-wasm/*reflect.rawType).NumOut (http://localhost:8000/poker-odds-wasm/wasm.wasm) at interface:{Align:func:{}{basic:int},AssignableTo:func:{named:reflect.Type}{basic:bool},Bits:func:{}{basic:int},ChanDir:func:{}{named:reflect.ChanDir},Comparable:func:{}{basic:bool},ConvertibleTo:func:{named:reflect.Type}{basic:bool},Elem:func:{}{named:reflect.Type},Field:func:{basic:int}{named:reflect.StructField},FieldAlign:func:{}{basic:int},FieldByIndex:func:{slice:basic:int}{named:reflect.StructField},FieldByName:func:{basic:string}{named:reflect.StructField,basic:bool},FieldByNameFunc:func:{func:{basic:string}{basic:bool}}{named:reflect.StructField,basic:bool},Implements:func:{named:reflect.Type}{basic:bool},In:func:{basic:int}{named:reflect.Type},IsVariadic:func:{}{basic:bool},Key:func:{}{named:reflect.Type},Kind:func:{}{named:reflect.Kind},Len:func:{}{basic:int},Method:func:{basic:int}{named:reflect.Method},MethodByName:func:{basic:string}{named:reflect.Method,basic:bool},Name:func:{}{basic:string},NumField:func:{}{basic:int},NumIn:func:{}{basic:int},NumMethod:func:{}{basic:int},NumOut:func:{}{basic:int},Out:func:{basic:int}{named:reflect.Type},PkgPath:func:{}{basic:string},Size:func:{}{basic:uintptr},String:func:{}{basic:string}}.NumOut$invoke (wasm.wasm:0x935ed) at text/template.goodFunc (wasm.wasm:0x9358e) at text/template.addValueFuncs (wasm.wasm:0x944da) at (poker-odds-wasm/*text/template.Template).Funcs (http://localhost:8000/poker-odds-wasm/wasm.wasm) at (poker-odds-wasm/*html/template.Template).Execute (http://localhost:8000/poker-odds-wasm/wasm.wasm) at getResultsInHTML (wasm.wasm:0xb6ce2) at getResultsInHTML.command_export (wasm.wasm:0xba714) at HTMLFormElement.\u0026lt;anonymous\u0026gt; (poker-odds-wasm/:119:35) Differences between the official go compiler and tinygo The reason for using tinygo was that it is designed for lower memory architectures, and produces smaller executables, but I have found that it is also significantly slower. Specifically, on my computer with Linux/amd64 architecture, I have obtained the following results:\ntinygo go build go build -ldflags=\u0026quot;-s -w\u0026quot; version 0.30.0 1.21.6 1.21.6 time 14,536s 0,080s 0,086s size 1,8M 2,6M 2,5M size syscall/js ? 5,2M 5,1M Reinserting the WASM into the browser There seems to be another problem, Uncaught TypeError: Cannot read properties of undefined (reading 'exports'). Nothing strange, I just have to use the wasm_exec.js of my version of Go, which is different from the version of tinygo. I search for it with the find command, as before, and copy it from the path /usr/lib/go/misc/wasm/wasm_exec.js.\nA new error appears Uncaught TypeError: wasm.exports.getResultsInHTML is not a function, it must be because the Go compiler exports the functions in a different way, not with //export getResultsInHTML.\nTo communicate with JS I will need the package https://pkg.go.dev/syscall/js. Functions are registered from main, and the program cannot terminate, so the thread is blocked using a \u0026lt;-make(chan bool) channel. Furthermore, the function must be of the type js.FuncOf -\u0026gt; func(this js.Value, args []js.Value) any.\nfunc main() { js.Global().Set(\u0026#34;getResultsInHTML\u0026#34;, js.FuncOf(func(this js.Value, args []js.Value) any { handsStr := args[0].String() boardStr := args[1].String() return getResultsInHTML(handsStr, boardStr) })) // listen infinite \u0026lt;-make(chan bool) } Now the function is global in JavaScript, it is not called with wasm.exports.getResultsInHTML but directly getResultsInHTML.\nUse poker-odds Below I have inserted an iframe with the necessary code, so you can test the final result.\n","permalink":"https://arturo-source.github.io/posts/execute-golang-in-browser/","summary":"Mini tutorial to execute Go with WASM in the browser","title":"Execute Golang in the Browser"},{"content":"Hugo is a static website builder. It is incredibly fast, both building the site (\u0026gt;1ms per page), and serving the pages.\nHUGO does not have a meaning per se, it is just the name of the tool. The key to its speed lies in being static. Generally you will use an HTTP server to serve your website (Apache HTTP server, NGINX, Caddy, etc.) to serve your PHP CMS (WordPress, Magento, Joomla, etc.). You can even use an HTTP server as a proxy for your web applications made with Python, NodeJS, Go, etc. But all the previous options have in common that they are dynamic, because they have to execute code on the server.\nHow does Hugo work? What does it do so fast? When we build a website with Hugo, we will write the content with Markdown, it compiles all the content into HTML, and links it. This way, we can upload the result to our favorite HTTP server, and when a user requests the page, the server doesn\u0026rsquo;t have to execute any logic (connecting to a DB, processing data, etc.), which makes it so fast.\nTherefore, Hugo is fast in three different aspects:\nServe content to users quickly (it\u0026rsquo;s simple HTML). Build the site quickly (less than 1ms per page). You write the article very quickly (Markdown is incredibly easier to use than HTML). Advantages and disadvantages of Hugo You already know the advantages: speed and simplicity in all aspects. The disadvantage is in turn its greatest advantage, which is static. This means that, no matter how fast it is, it does not allow you to execute code on the server. But this makes it perfect for creating sites that do not need logic, such as a portfolio, or a blog.\nOther hidden advantages, which make it so powerful, are:\nYou can create multilingual websites. Contains functions to optimize SEO. You can extend the functionality of Markdown, using Go templates. You have a large number of free themes, or you can build your own. If it is that easy, how do I use Hugo? Of course, first you have to install hugo. To create a site, simply run:\nhugo new site yourwebname This creates a folder called yourwebname that contains everything you need. You can access it by doing cd yourwebname.\nAnd next is choose a theme, for this example I will use hugo-book.\ngit init git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book echo \u0026#34;theme = \u0026#39;hugo-book\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml And you are ready to write your first content, usually the posts/ folder is used, but you can create them wherever you want, for the example I will use blog/.\nhugo new content blog/my-first-post.md And the file yourwebname/content/blog/my-first-post.md will have been created, which is a copy of archetypes/default.md with information about the article you are going to write.\nIf you also need to modify global information on the website, you can do so in yourwebname/hugo.toml (Hugo accepts toml, yaml, and json for configuration). Here you can modify the settings of Hugo, and the theme you have chosen.\nAnd now all that\u0026rsquo;s left is to get the website up and running, you can do it with hugo server, or hugo server -D if you want to see the articles you have as draft: true, you\u0026rsquo;ll see how fast it goes! But this will only work on your computer, if you want to make it public (deploy to production), choose your favorite way among all these.\nFor more information, consult the official Hugo website.\n","permalink":"https://arturo-source.github.io/posts/what-is-hugo/","summary":"Take a look at this CMS created with Go, the fastest CMS in the world.","title":"What is Hugo? The blazingly fast CMS"},{"content":"YAML is a data format for configuration files, created to be human readable.\nYAML (YAML Ain\u0026rsquo;t Markup Language) is a recursive acronym, like many others in the computer world. YAML was designed to be easily readable by humans, tired of using markup languages (HTML, XML, etc.) for configuration files. It accepts all types of data: strings, integers, decimals, booleans, nulls, lists and objects.\nWhy learning YAML? You can really learn YAML in one hour, and it\u0026rsquo;s quite a popular format, so it\u0026rsquo;s a worthwhile knowledge to have. Some examples of tools that use YAML are Kubernetes, Docker, or Hugo, among others. Even, if you want to use it in your own project, all known languages have an implementation to use it easily (you can see it in the official website).\nHow is the syntax of YAML? Let\u0026rsquo;s start with simple data: string, int, float and bool.\nfullName: Arturo Source age: 25 height: 1.81 hasHouse: true As you can see, it is not necessary to use quotation marks to write a string. Unless you want to explicitly indicate that it is a string. For example, if you put age: '25', then the age would change from an int to a string. Or if you want to use special characters (:, [, ], ?, \u0026amp;, among others).\nAlso, if you need to write a comment you have to use the # character, and for null values null.\nfullName: Arturo Source # real?? # age: 25 height: null Also, you may need a multiline string, this is easy using the | character.\nbook: title: The Great Gatsby abstract: | \u0026#34;The Great Gatsby\u0026#34; is a classic novel written by F. Scott Fitzgerald. Set in the roaring twenties, the story explores themes of wealth, love, and the American Dream through the lens of the mysterious Jay Gatsby. The narrative is narrated by Nick Carraway, a young man who becomes entangled in the lives of Gatsby and his wealthy social circle in Long Island. releaseYear: 1925 Arrays and objects in YAML YAML tries to stay as readable as possible, so it uses 2 or 4 spaces (NEVER tabs) to create arrays or objects. This way, you know at a glance what they belong to.\n# my favourite fruits fruits: - apple - banana - orange person: name: Arturo age: 25 And if you want an array of objects, you just put a dash - in the first attribute of the object.\npeople: - name: Arturo age: 25 - name: John age: 22 - name: Lucy age: 28 And objects allow as much nesting as you need.\nemployee: name: Charles department: name: Marketing charge: boss ","permalink":"https://arturo-source.github.io/posts/what-is-yaml/","summary":"Learn what YAML is and how to use it, in a few minutes","title":"What is YAML?"},{"content":"Frontend and Backend are two sides of the same coin: application development. Whether web, desktop, or mobile applications, you will always find this distinction. And the programmer who works in both disciplines is called Full Stack.\nThe front end is the interface through which the user uses the application. Front-end programmers are responsible for making the user understand how to use the application without knowing anything about programming.\nThe back end is the brain of the application. Back-end programmers provide a simple interface to the front-end programmer, so that they do not have to understand how the application works (data storage, data processing, authorization, etc.).\nHow do you know which one to choose? The truth is that, if you are starting out, you should try both fields, because you are not going to discover which one you like best without doing so. The technologies that are created, both for backend and frontend, try to solve various tasks that sometimes you will not know if they are from the backend or the frontend. Therefore, it is worth starting by knowing both, because, even if you specialize in one, having a little knowledge of the other field will allow you to work better. Even being able to work as a full-stack programmer if you are passionate about both fields.\nTecnologías actuales Frontend Por el lado del frontend, lo primero que merece la pena aprender es JavaScript, porque, a pesar de existir otras tecnologías para aplicaciones móviles y de escritorio, JavaScript es el \u0026ldquo;único\u0026rdquo; lenguaje que puedes usar para programar web. Pero, además, si sabes JavaScript, hay muchas tecnologías que te permiten crear aplicaciones móviles o de escritorio, simplemente a partir de tu conocimiento de JS.\nOnce you learn some Vanilla JavaScript (pure JS), it is advisable to learn a frontend framework, because it will make your life much easier when creating interfaces. The best known currently are React, Svelte, Vue and Angular.\nIf you only want to specialize in desktop applications, the most used technologies are .NET, Qt, GTK, Electron (to use JS). While if you are only going to focus on creating mobile applications, you will be interested in Flutter (it is cross-platform), React Native (cross-platform, but using JS), or being more specific, the native language of Android applications is Kotlin, and the iOS one is Swift.\nBackend On the backend side, the range is more open. The normal thing is to learn a programming language (it can be Go, Python, PHP, or JavaScript itself with NodeJS, and a long etcetera), and the corresponding framework, Django for Python, Laravel for PHP, or ExpressJS for NodeJS. In the case of Golang there are multiple frameworks, but its own HTTP library is much more than enough in many cases.\n","permalink":"https://arturo-source.github.io/posts/what-are-frontend-and-backend/","summary":"Differences between frontend and backend, how to choose the best one, and how to work with them.","title":"What are Frontend and Backend?"},{"content":"MVC is a design pattern that separates an application into three key components: Model (data and logic), View (user interface), and Controller (interaction management and flow).\nMVC (model-view-controller), is used in software development, especially in the development of web applications. This pattern makes it easier for us to have more maintainable, scalable, and understandable code.\nWhy choose MVC? You may say \u0026ldquo;I\u0026rsquo;ve been programming for X amount of time and I haven\u0026rsquo;t needed to know what MVC is\u0026rdquo;, but the reality is that using patterns in programming is going to help you a lot. Programming has been around since before you were born, and there have already been other people who have encountered the same problems as you. You can extend this last phrase to your favorite language, your video game engine, or any area of programming.\nAnd, returning to the topic of the post, why MVC? The truth is that there are new application design architectures, newer and perhaps better, but many of them are based on MVC, so learning MVC will serve as a good foundation for learning the rest.\nThe intention of MVC is to separate the code into the three components already mentioned (Model, View and Controller), to such an extent that three different people could work on the three different fields, without needing to know how the other field is programmed. The only thing they have to know about each other is how they communicate with each other (at the end there will be a practical example, so that it is 100% clear).\nIn fact, such is the separation between the three MVC components, that you could change one of them, and the application should still work. The best example is when we have a Model that talks to a MySQL database, and we change the Model completely to use PostgreSQL. The View and Controller can remain the same as before.\nHow is MVC structured? Since you already know the three parts, and why it is important to separate them, the next thing is to know what exactly each component does.\nView: This is what the user of the application will see. It can be simple HTML, a React app, or even a mobile app. Controller: Acts as an intermediary between the View and the Model. Processes user requests, and decides what data is displayed in the view. Model: He is in charge of processing the data. When you store, update, delete, or retrieve data, the Controller does not have to know how it is done. Practical example The file tree that I am going to use has the following form:\nview/ view/books.html model/ model/book.go controller/ controller/book.go main.go I will use a REST API with Go as an example, you will see how easy it is to understand like this. We will have a simple HTML file, which will have the syntax of a Go template.\nThe View is this HTML that using range will cycle through all the books. File ./view/books.html\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Lista de Libros\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Lista de Libros\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {{range .}} \u0026lt;li\u0026gt;{{.Title}} - {{.Author}}\u0026lt;/li\u0026gt; {{end}} \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The Controller implements only the logic of getting books and adding a book, for simplicity. File ./controller/book.go\npackage controller func bookListHandler(w http.ResponseWriter, r *http.Request) { if r.Method == http.MethodPost { newBook := model.Book{ Title: r.FormValue(\u0026#34;title\u0026#34;), Author: r.FormValue(\u0026#34;author\u0026#34;), } // Connect the controller with the model model.AddBook(newBook) fmt.Fprint(w, newBook) } if r.Method == http.MethodGet { // Connect the controller with the view view, _ := template.ParseFiles(\u0026#34;./view/books.html\u0026#34;) // Connect the controller with the model books := model.GetBooks() view.Execute(w, books) } } The Model replaced the database with an array as a global variable, for simplicity. File ./model/book.go\npackage model type Book struct { Title string Author string } var books = []model.Book{ {\u0026#34;Book 1\u0026#34;, \u0026#34;Author 1\u0026#34;}, {\u0026#34;Book 2\u0026#34;, \u0026#34;Author 2\u0026#34;}, {\u0026#34;Book 3\u0026#34;, \u0026#34;Author 3\u0026#34;}, } func GetBooks() []Book { // This could be a SELECT in a database // But return global books variable (used as database in this example) return books } func AddBook(book Book) { // This could be an INSERT in a database // But append the book at global books variable (used as database in this example) books = append(books, book) } And finally, the main function to set up the HTTP server. File ./main.go\npackage main func main() { http.HandleFunc(\u0026#34;/books\u0026#34;, controller.bookListHandler) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } ","permalink":"https://arturo-source.github.io/posts/what-is-mvc/","summary":"A little bit of MVC to become a programming pro.","title":"What is MVC?"},{"content":"APIs allow computer programs to communicate with each other.\nNormally you will use an API (Application Programming Interface) over the HTTP protocol, which is the most common in Internet communications. However, an API is any set of rules that two computer systems follow to communicate. Normally you are not aware that you are consuming an API because you use a library that makes it easier for you.\nWhat types of APIs exist? If you have any programming experience, these examples will surely sound familiar to you:\nOperating Systems: Windows, macOS and Linux provide APIs to software developers to interact with the functions and features of the operating system. Databases: They allow your software to connect and make queries to database engines (MySQL, PosgreSQL, etc.). Hardware: Devices such as printers, cameras and sensors often come with their own APIs that allow developers to interact with them from their applications. Cloud services: Whether it is a Pokemon statistics API, such as your cloud storage system, or a VPS that you hire, they offer APIs that allow you to automate actions through requests (probably in HTTP, although there are more communication protocols). Examples with Go I am not going to go into several languages, as in other articles, because you will easily understand what each of the APIs mentioned above is.\nTo create or read files, you will need to interact with the operating system.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { file, err := os.Create(\u0026#34;file.txt\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error creating file:\u0026#34;, err) return } defer file.Close() data := []byte(\u0026#34;Hello world!\u0026#34;) _, err = file.Write(data) if err != nil { fmt.Println(\u0026#34;Error writing file:\u0026#34;, err) return } } How to consume an HTTP API with the Go standard library.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;io/ioutil\u0026#34; ) func main() { url := \u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34; response, err := http.Get(url) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer response.Body.Close() body, err := ioutil.ReadAll(response.Body) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } fmt.Println(string(body)) } To interact with a database, in this case sqlite.\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { db, err := sql.Open(\u0026#34;sqlite3\u0026#34;, \u0026#34;test.db\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer db.Close() rows, err := db.Query(\u0026#34;SELECT name FROM users WHERE id = ?\u0026#34;, 1) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer rows.Close() var name string if rows.Next() { err := rows.Scan(\u0026amp;name) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } fmt.Println(\u0026#34;Name:\u0026#34;, name) } else { fmt.Println(\u0026#34;User not found\u0026#34;) } } To interact with Hardware, you can use the famous library gocv.\n","permalink":"https://arturo-source.github.io/posts/what-is-an-api/","summary":"\u003cp\u003eAPIs allow computer programs to communicate with each other.\u003c/p\u003e\n\u003cp\u003eNormally you will use an API (Application Programming Interface) over the HTTP protocol, which is the most common in Internet communications. However, an API is any set of rules that two computer systems follow to communicate. Normally you are not aware that you are consuming an API because you use a library that makes it easier for you.\u003c/p\u003e\n\u003ch2 id=\"what-types-of-apis-exist\"\u003eWhat types of APIs exist?\u003c/h2\u003e\n\u003cp\u003eIf you have any programming experience, these examples will surely sound familiar to you:\u003c/p\u003e","title":"What is an API?"},{"content":"An environment variable is global data, stored in the operating system, that can be easily read by any program.\nTypically you will use it to manage data that changes between a \u0026lsquo;production\u0026rsquo; environment, and a \u0026lsquo;development\u0026rsquo; environment. So environment variables allow you to change the behavior of your program, without having to change the code.\nHow are they saved in Environment Variables? You can really save any type of primitive data (you learned about it in the variables post), in a way as simple as this:\nMY_NAME=Arturo YT_CHANNEL_URL=https://www.youtube.com/@arturosource MAX_TIMEOUT=10 Generally, you will write the environment variable in capital letters, followed by the name of the variable with a =, and finally, the value without spaces at the beginning or at the end.\nWhat data is most common to store? Store any data that you think is relevant, with experience you will know which ones should be stored and which ones should not. But here are some examples to get you started.\nSystem paths: Tells a program where to look for executable files, libraries, resources, or configuration files. Authentication data: Stores authentication credentials, such as API keys or passwords. Settings: Customize fields such as listening port, domain name, debugging level, language or region, etc. Where to store environment variables? There are several ways to let a program know which variables to use. I will focus on the Linux operating system, which is where you will commonly program, and deploy your programs.\nAt the operating system level: it is as simple as editing the /etc/environment file, and follows the style that appears above. Use the nano text editor, for example, and you will need permissions to edit the file. So the command will be sudo nano /etc/environment. At the program level: If you run an application from the terminal, you can assign as many variables as you want before execution. Using the previous example, you could write a command like this MY_NAME=Arturo MAX_TIMEOUT=10 bash ./coolbashscript. In a file that your application will read: in modern languages you will have a library with which you can read a file as if it had environment variables, commonly it will be called .env. You will have to look for the corresponding library for your programming language, and that\u0026rsquo;s it. How to use environment variables in your program? Finally, some examples of how environment variables are read in the most common languages.\nWith Golang, importing os.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { ytChannel := os.Getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;) fmt.Printf(\u0026#34;Valor de YT_CHANNEL_URL: %s\\n\u0026#34;, ytChannel) } With JavaScript, using the global variable process.\nconst ytChannel = process.env.YT_CHANNEL_URL; console.log(`Valor de YT_CHANNEL_URL: ${ytChannel}`); With PHP, the global function getenv.\n$ytChannel = getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;); echo \u0026#34;Valor de YT_CHANNEL_URL: \u0026#34; . $ytChannel; With Python, setting os too.\nimport os ytChannel = os.getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;) print(f\u0026#34;Valor de YT_CHANNEL_URL: {ytChannel}\u0026#34;) ","permalink":"https://arturo-source.github.io/posts/what-is-an-environment-variable/","summary":"What is an environment variable for? How to use it? All in one minute.","title":"What is an Environment Variable?"},{"content":"A variable is a box. In this box you will store data, access it, and manipulate it quickly.\nImagine that inside your box you want to store your age.\nage = 25 So somewhere in your computer\u0026rsquo;s RAM, there will be something like this:\n---- |25| ---- And whenever you want to go to that unknown part of your RAM, all you have to do is put age in your code, and magically you will be able to see the value 25.\nData types in programming A piece of data can be anything, but the simplest pieces of data are int, float, bool and string. These data types are called primitive data types, each programming language calls them in a different way, but they represent the same thing.\nint: integer -\u0026gt; 10.2, 66.4, etc. float: decimal number -\u0026gt; 10.2, 66.4, etc. bool: boolean value, i.e. true or false -\u0026gt; TRUE or FALSE string: text string -\u0026gt; \u0026ldquo;hello world\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, etc. Some languages will allow you to access more specific ones like byte, char, or pointers like int*, but with the above you will be able to handle the newer languages.\nGood practices When you start programming it is very tempting to start giving random names to variables, because your programs are small and no one has to read them. DON\u0026rsquo;T ever do that, although it is sometimes difficult to give a variable a descriptive name, it is always worth it.\nUsually your code will have to be read by other people, or worse still, your future self will have to read the code of your present self, and I assure you that you do not want to be your current self. future** if you don\u0026rsquo;t name your variables correctly.\nLet\u0026rsquo;s look at a small example.\nx = 10 y = x*x What is y supposed to be? It is such a non-descriptive code that the only way for you to know what is happening is if you have fresh knowledge of geometry. The correct way to name the variables would be like this.\nsideSize = 10 squareArea = sideSize*sideSize Now you understand what we wanted to calculate without any problem, without having to explain the code, just by the name of the variables.\nExamples with different programming languages A somewhat advanced concept, but worth mentioning now, is that of statically typed and dynamically typed programming languages. With the following examples you will understand it perfectly.\nIn the C++ programming language we will have to say what type the variable is. It is statically typed.\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; int main() { int age = 25; std::string name = \u0026#34;Charles\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;Hello, my name is \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; and I\u0026#39;m \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; \u0026#34; years old.\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } While Go programming language is also static, but if we use := the compiler deduces the type of variable for you.\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { age := 25 // int name := \u0026#34;Charles\u0026#34; // string fmt.Println(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;) } With JavaScript you can forget about types, it is a dynamic programming language.\nconst age = 25; const name = \u0026#34;Charles\u0026#34;; console.log(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;); This is both an advantage and a disadvantage. The code may seem simpler, but in the long run it will be more difficult to maintain.\nAnd finally, the famous Python programming language, which is also dynamic, although subtly different from JavaScript, but this is more advanced.\nage = 25 name = \u0026#34;Charles\u0026#34; print(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;) Disclaimer: With new versions of C++ you can deduce types like in Go, in JavaScript it is not necessary to write const, and \u0026ldquo;Hello, my name is \u0026ldquo;\u0026hellip; messages can be formatted in different ways, more elegant or simple. All of the above are simple examples, so that the message is easily understood.\n","permalink":"https://arturo-source.github.io/posts/what-is-a-variable/","summary":"The first step to learn programming. How do the programs work inside?","title":"What is a variable?"},{"content":"Committing in git means saving your file changes to your local repository. You always want to use a descriptive message to record the evolution of your project.\nMaking a commit in git is one of the fundamental concepts in version control. When you make a commit, you are creating a checkpoint in the history of your project. Each commit contains a snapshot of the files at that time, along with a descriptive message explaining the changes made.\nSteps to save your files There are a lot of platforms that integrate git (GitHub, GitLab, Bitbucket, Gitea). However, first I am going to give you the basic knowledge of working from your PC.\nIn this case I will talk about a programming project. Typically, you will have several files and folders. When you want to save your progress, you may have changed several files, but only want to record changes to a few. With . you will record changes to the folder you are working on.\ngit add . And if you only want to record the progress of three files, you will do it as follows.\ngit add file1 file2 folder1/file1 The second step, once you have registered the changes you want to save, is to commit the changes, what I will call \u0026lsquo;making a commit\u0026rsquo;. It is very important to place a message that represents the changes since the last commit. We can do this in two ways.\nThe first, for me, the simplest. Write the command and a summary of the changes will appear in your window. You can now write the comment.\ngit commit The second, faster. Add -m to the command to write the message directly.\ngit commit -m \u0026#34;Info about changes\u0026#34; This is all you need to keep track of changes in your application. To see all checkpoints, simply type git log.\nSave your code in the cloud There is one last fundamental command you want to know. It will help you save your code and all your changes in the cloud. Furthermore, when you are a professional, it will allow you to work with your colleagues, on the same code.\ngit push Push means upload your changes. You will do this after you have committed your changes with your commit, after several commits. But what if your colleagues want to download your changes?\ngit pull Pull means downloading the changes. You will want to do this whenever you want to have your changes in sync with the rest of the team.\n","permalink":"https://arturo-source.github.io/posts/what-is-git-commit/","summary":"Git basics in a minute.","title":"What is git commit?"},{"content":"SQL is a language used to query and manage relational databases.\nSQL (Structured Query Language) was developed in the 1970s and has become a standard in the management and manipulation of relational databases. You will always use SQL with a database engine, which is a piece of software that contains the logic to manipulate data. It is very common to use a database engine in programming, because it allows us to not have to program the data logic from scratch.\nSQL Syntax Each database engine (MySQL, MariaDB, PostgreSQL, SQLite, etc.) has additions to make data processing easier, but they all have the basic SQL syntax in common. Common operations you will want to do on a database are:\nCreate a table The first thing you\u0026rsquo;ll want to do is create a table so you can insert data, delete it, etc.\nCREATE TABLE Clients ( ID INT PRIMARY KEY, FullName VARCHAR(50), Email VARCHAR(100) ); This table will have:\nID (unrepeatable identifier, that is why it is PRIMARY KEY, and it is an integer, that is why INT). FullName (text string, therefore VARCHAR, maximum length 50 characters). Email (text string, this time of length 100). Delete a table This table can also be deleted.\nDROP TABLE Clients; Query a table SELECT * FROM Clients; You can also choose which fields you want to get, * means all.\nSELECT ID, FullName FROM Clients; Insert data into a table INSERT INTO Clients (ID, FullName, Email) VALUES (1, \u0026#39;Barnes Smith\u0026#39;, \u0026#39;bsmith@mail.com\u0026#39;); Update data from a table The WHERE clause in an update is very important. If you don\u0026rsquo;t use WHERE, all rows in the table will be updated.\nUPDATE Clients SET Email = \u0026#39;newbsmith@mail.com\u0026#39; WHERE ID = 1; Delete a row from a table When we delete rows in a table, it will also be very important to use the WHERE clause. If you don\u0026rsquo;t use WHERE, you will delete all the data in the table.\nDELETE FROM Clients WHERE ID = 1; Advanced SQL Queries (SUM, COUNT, AVG) The next step is to do operations with the data. What you want is not just to query data, database engines are much more powerful than that. First you will create a table and insert data as you already know how to do:\nCREATE TABLE Sales ( ID INT PRIMARY KEY, Product VARCHAR(255), Quantity INT, Price DECIMAL(10, 2) ); INSERT INTO Sales (ID, Product, Quantity, Price) VALUES (1, \u0026#39;T-shirt\u0026#39;, 100, 15.99), (2, \u0026#39;Jeans\u0026#39;, 50, 29.99), (3, \u0026#39;Shoes\u0026#39;, 30, 49.99), (4, \u0026#39;Hat\u0026#39;, 75, 9.99), (5, \u0026#39;Socks\u0026#39;, 200, 4.99); With this data, you can calculate, for example, how much you have earned. You can use AS to alias the addition operation.\nSELECT SUM(Price * Quantity) AS TotalEarn FROM Sales; You can also count how many products you have sold.\nSELECT COUNT(*) AS TotalSales FROM Sales; And if you use the WHERE clause, you can see how many \u0026lsquo;Jeans\u0026rsquo; you have sold. With the data provided above, the result should be 1.\nSELECT COUNT(*) AS JeansSales FROM Sales WHERE Product = \u0026#39;Jeans\u0026#39;; And finally, you can average the price of the products sold.\nSELECT AVG(Price) AS AveragePrice FROM Sales; There are many other simple operations (MIN, MAX, GROUP BY, HAVING, etc.) that will make your life with SQL easier. But at the beginning I told you about relational databases, what does relational mean?\nRelational database? SQL is relational, because all tables in a database can have relationships with each other. For example, you have created a Sales table before, but the usual thing would be to have another Products table, because if you make a sale, it has to be about a product. This is what is known as a relationship between tables.\nOnce you know the existence of relationships, you will have to consider how to make JOIN, LEFT JOIN queries, etc. But this I leave you to continue investigating.\n","permalink":"https://arturo-source.github.io/posts/what-is-sql/","summary":"Learn SQL in just a few minutes.","title":"What is SQL?"},{"content":"JSON is a lightweight, human-readable data exchange standard.\nJSON (JavaScript Object Notation) uses a structure of key-value pairs to represent information independently of the programming language. This allows you to store, read, send and receive data, regardless of the software, protocol, or programming language you use.\nWhy choose JSON? Of course, there are other standards that allow you to do one, some, all or more functions than JSON (including XML, YAML, protobuf, etc.), but the reasons to choose JSON are:\nReadability: JSON uses human-readable syntax. It is easy to read and write Easy to use: All programming languages have a library to parse JSON. Adoption: Most of the APIs that you are going to consume will respond in JSON. JSON Syntax Typically, you will find JSON with the following format, representing, for example, a person:\n{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] } But you can also find a set of people (I will remove fields from the JSON for simplicity):\n[ { \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;age\u0026#34;: 30 }, { \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 27 }, { \u0026#34;name\u0026#34;: \u0026#34;Sophia\u0026#34;, \u0026#34;age\u0026#34;: 32 } ] A common error: remember that the last field of the object { ... } and the array [ ... ] do not have a comma.\nExamples with code Below are some examples of how to read JSON with the most common languages. The data could be obtained from an API call, or by reading a .json file. Depending on the language and the situation, we will do different error handling, but these are very simple examples.\nGolang package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { jsonData := `{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }` type Person struct { Name string `json:\u0026#34;name\u0026#34;` Surname string `json:\u0026#34;surname\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` Height float64 `json:\u0026#34;height\u0026#34;` LovesPasta bool `json:\u0026#34;lovesPasta\u0026#34;` Interests []string `json:\u0026#34;interests\u0026#34;` } var person Person if err := json.Unmarshal([]byte(jsonData), \u0026amp;person); err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;Name: %s\\nSurname: %s\\nAge: %d\\nHeight: %.2f\\nLoves Pasta: %v\\nInterests: %v\\n\u0026#34;, person.Name, person.Surname, person.Age, person.Height, person.LovesPasta, person.Interests) } JavaScript var jsonData = `{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }`; var person = JSON.parse(jsonData); console.log(\u0026#34;Name: \u0026#34; + person.name); console.log(\u0026#34;Surname: \u0026#34; + person.surname); console.log(\u0026#34;Age: \u0026#34; + person.age); console.log(\u0026#34;Height: \u0026#34; + person.height); console.log(\u0026#34;Loves Pasta: \u0026#34; + (person.lovesPasta ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;)); console.log(\u0026#34;Interests: \u0026#34; + person.interests.join(\u0026#34;, \u0026#34;)); PHP \u0026lt;?php $jsonData = \u0026#39;{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }\u0026#39;; $person = json_decode($jsonData, true); if ($person === null) { echo \u0026#34;Error al decodificar el JSON\\n\u0026#34;; } else { echo \u0026#34;Name: \u0026#34; . $person[\u0026#34;name\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Surname: \u0026#34; . $person[\u0026#34;surname\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Age: \u0026#34; . $person[\u0026#34;age\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Height: \u0026#34; . $person[\u0026#34;height\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Loves Pasta: \u0026#34; . ($person[\u0026#34;lovesPasta\u0026#34;] ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;) . \u0026#34;\\n\u0026#34;; echo \u0026#34;Interests: \u0026#34; . implode(\u0026#34;, \u0026#34;, $person[\u0026#34;interests\u0026#34;]) . \u0026#34;\\n\u0026#34;; } ?\u0026gt; Python import json jsonData = \u0026#39;\u0026#39;\u0026#39; { \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] } \u0026#39;\u0026#39;\u0026#39; person = json.loads(jsonData) print(\u0026#34;Name:\u0026#34;, person[\u0026#34;name\u0026#34;]) print(\u0026#34;Surname:\u0026#34;, person[\u0026#34;surname\u0026#34;]) print(\u0026#34;Age:\u0026#34;, person[\u0026#34;age\u0026#34;]) print(\u0026#34;Height:\u0026#34;, person[\u0026#34;height\u0026#34;]) print(\u0026#34;Loves Pasta:\u0026#34;, \u0026#34;Yes\u0026#34; if person[\u0026#34;lovesPasta\u0026#34;] else \u0026#34;No\u0026#34;) print(\u0026#34;Interests:\u0026#34;, \u0026#34;, \u0026#34;.join(person[\u0026#34;interests\u0026#34;])) ","permalink":"https://arturo-source.github.io/posts/what-is-json/","summary":"Learn what JSON is and what it is used for in a minute.","title":"What is JSON?"},{"content":"This week I started a project to refresh my knowledge of React. But since it was a side-project, I wanted to take as little time as possible.\nPlay now How did I create the minesweeper? You can find the code on my github, but the interesting thing is that it didn\u0026rsquo;t take me long to set up the project. To create it I used vite, simply typing npm create vite@latest on the command line.\nI chose React as the framework, and among the options to compile the project and develop it, I used SWC, since it is a faster bundler and allows me to speed up the work.\nInstead of TypeScript I used JavaScript, because of what I mentioned before, I want it to be a quick project, and not take too long.\nSince Vite already builds everything you need in the package.json, when I start developing I just run npm run dev. While building the project is npm run build.\nHow to deploy the project? To build the project you already know that simply running npm run build will create a folder called ./dist. This folder contains everything you need to run the application. But my goal was to have the game available on my website, and just dragging the folder onto my website didn\u0026rsquo;t work.\nIf you look at the index.html that is inside the ./dist folder, the following lines appear that are responsible for linking the CSS and JS.\n\u0026lt;script type=\u0026#34;module\u0026#34; crossorigin=\u0026#34;\u0026#34; src=\u0026#34;/assets/index-3d1a63c8.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/assets/index-bab0855b.css\u0026#34; /\u0026gt; The problem was that the paths were absolute because they started with a slash /, but if you remove the slash at the beginning, the browser understands that it has to use an absolute path, so it won\u0026rsquo;t matter if your game is in a subfolder, as long as when the assets (CSS and JS) are in the same folder.\nTry the game yourself ","permalink":"https://arturo-source.github.io/posts/minesweeper-with-react/","summary":"The well-known minesweeper game, created with React, try it now and see how it was made.","title":"Minesweeper made with React"},{"content":"Tired of having to search the Docker documentation every time you want to use it? Me too! So in this post we are going to review the basic knowledge, and you will understand EVERYTHING even if it is the first time you use Docker.\nJust in case you don\u0026rsquo;t know Docker: it is an application to deploy OTHER APPLICATIONS, and forget about having to configure them. It also works on all operating systems.\nHow to run a Docker container We are going to start with something simple: we are going to set up a MySQL database.\nThe first thing you should know is that all the best-known applications have their Docker version, you can search for them in the Docker hub. An example of them is this, which can be verified that it is official because it says \u0026ldquo;Docker Official Image\u0026rdquo;. https://hub.docker.com/_/mysql\nAnd you simply put the following in the terminal docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql\nBut this is a super long line, what does each thing mean?\nrun: downloads the MySQL image (if you don\u0026rsquo;t already have it), and runs the image in a container (ie runs it). \u0026ndash;name: it is used to give the container a name, later we will see why. -e: used to assign environment variables, so we won\u0026rsquo;t have to touch configuration files. In this case we tell the ROOT password of the database. -d: used to leave the container in detached mode. That is, the container is not turned off until the execution is finished (in the case of the database, until we stop it). As a final straw, it should be clarified that docker run is equivalent to doing docker pull (download) and docker exec (run).\nUseful Docker commands Now that I\u0026rsquo;ve blown the whistle on you, let\u0026rsquo;s go with more useful commands. The next thing you need to know is how to see the containers that are active. With docker ps you will see them, and to see also the ones that are not active docker ps -a of all.\nWhat we see to the left of each line is the ID of the container, we can use it to refer to it. On the other hand, on the far right you have the NAME, which is also used to refer to the container, and is assigned randomly unless you use \u0026ndash;name that you have seen before.\nSo, it is as simple as, if you want to stop a container type docker stop [ID], to restart a container docker restart [ID], and if you want to delete it from your computer docker rm [ID]. Substituting [ID] for the id of the container or the name that you have assigned to it.\nHow to get inside a container You may want to get into a Docker container, there are many reasons to do so (for example, create a custom image). And since most Docker images use Linux, what you can do is open a terminal inside the container.\nTo do this, you are going to write in the terminal docker exec -it [ID] bash. Of course, changing the [ID] by the id of the container. And what does this command mean?\nexec: executes a command inside the container. -it: allows you to use the container interactively. bash: is the command you run (opens a terminal session). This way you can run the same commands you would run in your terminal, but inside the container you created.\nPorts and Volumes It is essential that you understand the use of ports and volumes with Docker, because with most images you will want to use them.\nTo assign a port, you\u0026rsquo;ll use the -p 8080:80 option, so the port you want to expose on your computer will be the first one before the colon, and the container\u0026rsquo;s listening port will be the second one. In this way we can put an HTTP server, which inside will be on port 80, listening on port 8080 on your server. Otherwise, if the HTTP server could not communicate with the outside, it would be practically useless.\nAnd on the other hand we have the volumes, you can have many reasons to create a volume but the most important I consider is persistence. If you\u0026rsquo;re running a database server, as in the MySQL example, and you don\u0026rsquo;t want to lose all the contents of the database when you delete the container, you have to tell Docker where you want it to write that information on your server. The option we will use is -v /path/your/computer:/path/in/container, in this way the information will be stored in the path that you specify. Volumes are actually used in another way, but this is the easiest way.\nDifference Between Image and Container This is really simple, but when you see it for the first time it can be confusing. An image is the base with which you are going to create your container. So if you want to set up a MySQL database server, you\u0026rsquo;ll look for an image in the Docker Hub, and build a container with the database server.\nHow do I normally use it? The command that I use the most for the development of my applications is docker run --rm -p 8080:80 -e VARIABLE=value -d image:tag. Putting --rm in the command is not something that is done in production environments, but for development it will save you constantly deleting containers, as soon as the execution ends, the container is deleted. While -p, -e and -d I always use it because it is common to have to put a process to listen on a port, and to have to assign a password. And finally, I have not mentioned the tag, but if you want the same version of the image to always be downloaded, you need to assign it a tag, otherwise you will be downloaded the \u0026ldquo;latest\u0026rdquo;, which may have changes that screw up your app.\nTo end this post, I just want to clarify that, although I have written this post in order to help the community, in reality it has also been written to remind me, every time I have to use Docker again, what is the minimum essential that I have to know so as not to die trying. So you\u0026rsquo;re welcome for the help of Arturo from the future 😜.‌\n","permalink":"https://arturo-source.github.io/posts/first-time-using-docker/","summary":"A quick tutorial, both useful if it\u0026rsquo;s your first time, or if you need to refresh your knowledge of Docker.","title":"First Time Using Docker"},{"content":"Good practices in any programming language One of the most important things when we work as a team is to follow the same programming style. This is important because some colleague will probably have to see your code in the future, or you will have to see theirs, or what is worse, you will have to see yours. And you want that job to be as painless as possible.\nIt is true that there are some good programming practices that are common to all languages, such as making a function self-describing, in definition, that the name of the function explains what you do inside it, and for this you usually need that the function is as short as possible. The next example, which is the snake game, is an example of a function that is self-describing, instead of writing all the code to draw the snake, the food, and the score, what I did was create functions that will take care of doing that, and then call them from the drawGame function, which all it does is draw the current state of the game.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } Otra buena práctica común a todos los lenguajes es intentar evitar el código espagueti. Esto significa que si tu código tiene un if, dentro de otro if, etc. y queda mucho espacio a la izquierda, probablemente tengas que refactorizarlo (esto aplica también a los bucles).\nfunc spaghettiCode(u User) { if u.Name != \u0026#34;\u0026#34; { if u.Address != \u0026#34;\u0026#34; { if u.Email != \u0026#34;\u0026#34; { // Do something } else { // Do something with wrong email } } else { // Do something with wrong address } } else { // Do something with wrong name } } func noSpaghettiCode(u User) { if u.Name == \u0026#34;\u0026#34; { // Do something with wrong name return } if u.Address == \u0026#34;\u0026#34; { // Do something with wrong address return } if u.Email == \u0026#34;\u0026#34; { // Do something with wrong email return } // Do something } The naming of variables/functions/files Then, there are other practices that are neither good nor bad, and that do not depend on the programming language either, but it is convenient to reach an agreement with the team before starting a project. An example of these is the way to call variables, functions, and files, there are several well-known ones:\nPascal case: DrawGame Camel case: drawGame Snake case: draw_game Kebab case: draw-game As you can see, the pascal case and the camel case are very similar, it only changes whether the first letter will be capitalized or not. An example use case would be: use pascal case for class names, and camel case for function names.\nOn the other hand, some people prefer to use snake case, most commonly in older languages like PHP and C, but I\u0026rsquo;m sure it\u0026rsquo;s used in many modern language teams.\nWhile the kebab case is common for file naming, since the hyphen (-) is often used to subtract in programming, it is a reserved character.\nStyling with a Linter On the other hand, there are good practices that do not depend on the language, nor are they global, they are the practices referred to the style of the code. This is more difficult to define because each team has its style, but again, you have to put it in common so that there are not constant changes in the code, and both the code and the git are unreadable. The styles that are defined are whether to use spaces or tabs, whether to use semicolons or not, etc. The good thing is that if the whole team uses the same IDE, there are plugins (Linter) that help you to format the code with a specific style without the programmer having to worry about it.\nBuenas prácticas de programación en Go The good thing about Go is that being a compiled language, there are many bad practices that the compiler itself corrects for you, so if the code is badly written, it will complain until you fix it. The Golang language has well-defined rules to minimize this difference in programming style between one program and another.\nOne of the things that caught my attention the most is that if you want something (a variable, an attribute, a function) to be public, you have to name it starting with a capital letter. Also, I seem to remember that before it didn\u0026rsquo;t allow the use of snake case, but now it does, although most of the programs you\u0026rsquo;ll see will be written with camel/pascal case.\nAnother cool thing is that it doesn\u0026rsquo;t allow you to create variables that aren\u0026rsquo;t used, or have functions without return. This is really useful because it helps to avoid future errors that with interpreted languages (JS, PHP, etc) you wouldn\u0026rsquo;t see.\nAll these practices are explained in this post written by the Golang developers. But today I want to go further, not only with the most basic practices that the compiler corrects for you.\nHow does the best programmer should do it? Use the comments! I\u0026rsquo;m sure you\u0026rsquo;ve seen a definition when you mouse over json.Marshal this is because when they created the json library they put what it was for on top of it. If you are going to write packages that your colleagues will later use, it will be very useful for them to see information about that function (what errors it can return, etc.).\nNever use panic()! In Go there are no exceptions, but panic() does something similar to them. When you\u0026rsquo;re testing something in Go it\u0026rsquo;s very convenient to use panic() to stop execution and find the error, but you don\u0026rsquo;t want your program to stop execution in production. That\u0026rsquo;s why within your functions, whenever you need it, return error, never panic().\nNever use _ in an error! If a function returns an error, it\u0026rsquo;s because it needs to be handled, otherwise “magic” can happen inside your program. And next to this practice: always use if err {}, just follow the program without else, this way you highlight errors and avoid code spaghetti.\nNamed returns. In Go, a function can return several variables. The general recommendation is func (n *Node) Parent() (*Node, error) {} instead of func (n *Node) Parent2() (node *Node, err error) {}, to avoid be too \u0026ldquo;verbose\u0026rdquo;, although the language already is in itself. However, if the function returns more than two parameters, it is recommended to use named returns, eg: func (f *Foo) Location() (lat, long float64, err error)\nVariables as short as possible! This applies above all to variables within a scope. For example, if you are building a package that has a variable that is used throughout the package, it is recommended that it be long and readable, whereas if a variable is only used within a function, it should be as short as possible (as long as it is used). understand what it is for) better i than sliceIndex.\nMany of these practices have been taken from this other post, written by the Go developers. So if you want to know more, I recommend you enter it.\n","permalink":"https://arturo-source.github.io/posts/best-practices-in-go/","summary":"Know the best practices to have a maintainable code over time for the Golang language","title":"Best Practices in Go"},{"content":"I will explain how I programmed one of the most emblematic games in history in this post, in just 100 lines of code. But first, a bit of context:\nTo create a game, we will usually use a game engine, for example Unity or Unreal Engine, among others. Within a game we will have entities and systems. But what are entities and systems?\nIf you have ever done OOP (Object Oriented Programming) it will be easier for you to understand, but still, let\u0026rsquo;s start with entities.\nAn entity could be the snake, in the case of the game we are talking about, but another entity could be an apple. Both the apple and the snake have an X and Y position, which define where they are on the map.\nAnd a system would be the one that is in charge of updating the game data. For example, there is the physics system, which changes the X and Y position of the snake, depending on whether it has to move up, down, left, or right.\nStep by step, how to create the game Let\u0026rsquo;s stop making a mess, both system, entity, etc. And let\u0026rsquo;s see code! The first few lines are simply constants (game settings):\nconst SQUARE_SIZE = 20; const GAME_WIDTH = 800; const GAME_HEIGHT = 800; const canvas = document.getElementById(\u0026#39;game\u0026#39;); const ctx = canvas.getContext(\u0026#39;2d\u0026#39;); // set width and height full screen canvas.width = GAME_WIDTH; canvas.height = GAME_HEIGHT; Then we create three objects that are the \u0026ldquo;things\u0026rdquo; that we will see on the screen (entities).\nvar snake = { body: [ { x: 400, y: 400 }, ], nextMove: \u0026#39;right\u0026#39;, }; var food = { x: 0, y: 0, }; var game = { score: 0, speed: 100, isOver: false, }; And now we come to the first system! This is the rendering system, basically drawing the “things” (entities) on the screen:\nfunction drawSnake() { // Draw head ctx.fillStyle = \u0026#39;#3a5a40\u0026#39;; ctx.fillRect(snake.body[0].x, snake.body[0].y, SQUARE_SIZE, SQUARE_SIZE); // Draw body ctx.fillStyle = \u0026#39;#a3b18a\u0026#39;; snake.body.slice(1).forEach(function (part) { ctx.fillRect(part.x, part.y, SQUARE_SIZE, SQUARE_SIZE); }); } function drawFood() { ctx.fillStyle = \u0026#39;red\u0026#39;; ctx.fillRect(food.x, food.y, SQUARE_SIZE, SQUARE_SIZE); } function drawScore() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;20px Arial\u0026#39;; ctx.fillText(\u0026#39;Score: \u0026#39; + game.score, 10, 30); } function drawGameOver() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;50px Arial\u0026#39;; ctx.fillText(\u0026#39;Game Over\u0026#39;, 200, 400); } And of course we have a main function that calls all of them. The first thing it does is draw the entire screen white, and then the rest.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } Now we have to move the snake! We have to modify the X and Y positions of the snake. This is done with the following function (what we would call physics system):\nfunction moveSnake() { var head = snake.body[0]; var newHead = { x: head.x, y: head.y, }; switch (snake.nextMove) { case \u0026#39;right\u0026#39;: newHead.x += SQUARE_SIZE; break; case \u0026#39;left\u0026#39;: newHead.x -= SQUARE_SIZE; break; case \u0026#39;up\u0026#39;: newHead.y -= SQUARE_SIZE; break; case \u0026#39;down\u0026#39;: newHead.y += SQUARE_SIZE; break; } snake.body.unshift(newHead); snake.body.pop(); } And the next thing we will do is check if the snake has died, or if it has eaten the apple (yes, you know where we are going, this is called collision system).\n// Check if snake is out of game function isSnakeOutOfGame() { var head = snake.body[0]; return head.x \u0026lt; 0 || head.x \u0026gt;= GAME_WIDTH || head.y \u0026lt; 0 || head.y \u0026gt;= GAME_HEIGHT; } // Check if snake is eating food function isSnakeEatingFood() { var head = snake.body[0]; return head.x === food.x \u0026amp;\u0026amp; head.y === food.y; } // Check if snake is eating itself function isSnakeEatingItself() { var head = snake.body[0]; return snake.body.slice(1).some(function (part) { return part.x === head.x \u0026amp;\u0026amp; part.y === head.y; }); } Lastly, in order for the player to be able to move around the map, we need the game to interact with a controller, in this case the keyboard. This is called input system.\nfunction handleKeyDown(e) { switch (e.key) { case \u0026#39;ArrowLeft\u0026#39;: if (snake.nextMove !== \u0026#39;right\u0026#39;) { snake.nextMove = \u0026#39;left\u0026#39;; } break; case \u0026#39;ArrowUp\u0026#39;: if (snake.nextMove !== \u0026#39;down\u0026#39;) { snake.nextMove = \u0026#39;up\u0026#39;; } break; case \u0026#39;ArrowRight\u0026#39;: if (snake.nextMove !== \u0026#39;left\u0026#39;) { snake.nextMove = \u0026#39;right\u0026#39;; } break; case \u0026#39;ArrowDown\u0026#39;: if (snake.nextMove !== \u0026#39;up\u0026#39;) { snake.nextMove = \u0026#39;down\u0026#39;; } break; } } Now we have the four systems that contain 99% of the video games, later you can add the ones you want, depending on the intention of the game. In this case we need the spawn system, to make the apple appear every time the snake eats one.\nfunction generateFood() { food.x = Math.floor(Math.random() * (GAME_WIDTH / SQUARE_SIZE)) * SQUARE_SIZE; food.y = Math.floor(Math.random() * (GAME_HEIGHT / SQUARE_SIZE)) * SQUARE_SIZE; } The only thing missing for this to be a conventional game is a main loop, and an initial state. This is to know how the game starts, and run all systems in order. I have also added a helper function (isGameOver) to know if the snake is dead. Usually we would make a life system to control this, but this game is so simple it doesn\u0026rsquo;t need it.\nfunction isGameOver() { return isSnakeOutOfGame() || isSnakeEatingItself(); } // Main game loop function main() { if (isGameOver()) { game.isOver = true; drawGameOver(); return; } if (isSnakeEatingFood()) { snake.body.push({}); game.score += 1; game.speed -= 1; generateFood(); } moveSnake(); drawGame(); setTimeout(main, game.speed); } // Start game function startGame() { snake.body = [ { x: GAME_WIDTH / 2, y: GAME_HEIGHT / 2 }, ]; game = { score: 0, speed: 100, }; generateFood(); main(); } In this case, the main loop is not a for loop, or while loop, but instead we take advantage of the fact that JavaScript is designed to be scripted via events and tell it at the end of the main loop to call itself again in some time (in this case, case 100ms).\nFinally, it is worth mentioning that commonly all the systems are executed in the main loop, in this case the input system is not being executed because JavaScript allows to put a listener in parallel. We do this with the following listener:\ndocument.addEventListener(\u0026#39;keydown\u0026#39;, handleKeyDown); document.getElementById(\u0026#39;start\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, startGame); Some contributions to start learning All the contributions are in Spanish, because I developed my final project in Spanish, but I think they are very useful for anyone who wants to start learning.\nNow that you have understood the concept of entity and system, you can start programming your own video game idea. Either without a graphics engine (as we have just seen now), or using a professional engine, be it Unity, Game Maker, Unreal Engine, or whatever.\nBoth are in spanish, but you can see the code (in english) in my GitHub:\nMy final degree project (GitHub too), which is divided into three parts, in the first a video game engine is made, in the second a game is created using this engine, and in the third artificial intelligence is added to this created game. The course from the person who guided me (in Spanish). With which I learned everything I know about video games, and if you are interested in learning how to make your own video game engine from scratch, it is the best resource you will have. Try it out right now ","permalink":"https://arturo-source.github.io/posts/snake-game-in-100-lines-of-code/","summary":"Let\u0026rsquo;s see how to code one of the most known games in the world in only 100 lines of code.","title":"I created Snake Game in 100 Lines of Code"},{"content":"Some of you will know the Telegram application. It is an instant messaging application with many features, including creating your own bots. This can be very useful on different occasions, which I may present in future posts, but for now I leave this to your imagination. ‌ The only thing we need to create a bot in Telegram is:\nA way to make requests http. A Telegram account. Send messages on Telegram with a bot Do not worry because both things are very easy to achieve, and the programming language does not matter. Therefore, to the point, this is how a message is sent by Telegram being a bot in the different languages:\nCode to make an http request with Go, PHP, JS, Python y bash Send a text message with Go:\nfunc SendMessage(msg string) error { token := os.Getenv(\u0026#34;TELEGRAM_TOKEN\u0026#34;) chatID := os.Getenv(\u0026#34;TELEGRAM_CHAT_ID\u0026#34;) url := fmt.Sprintf(\u0026#34;https://api.telegram.org/bot%s/sendMessage?chat_id=%s\u0026amp;text=%s\u0026#34;, token, chatID, msg) resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() return nil } Send a text message with PHP: (code reference)\nfunction sendMessage($chatID, $messaggio, $token) { $url = \u0026#34;https://api.telegram.org/bot\u0026#34; . $token . \u0026#34;/sendMessage?chat_id=\u0026#34; . $chatID; $url = $url . \u0026#34;\u0026amp;text=\u0026#34; . urlencode($messaggio); $ch = curl_init(); $optArray = array( CURLOPT_URL =\u0026gt; $url, CURLOPT_RETURNTRANSFER =\u0026gt; true ); curl_setopt_array($ch, $optArray); $result = curl_exec($ch); curl_close($ch); return $result; } Send a text message with JS (si usas node recuerda activar el flag \u0026ndash;experimental-fetch):\nconst sendMessage = async (message) =\u0026gt; { const url = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`; const body = { chat_id: process.env.TELEGRAM_CHAT_ID, text: message, }; const options = { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify(body), }; const response = await fetch(url, options); return await response.json(); }; Send a text message with Python: (code reference)\nimport requests TOKEN = \u0026#34;YOUR TELEGRAM BOT TOKEN\u0026#34; chat_id = \u0026#34;YOUR CHAT ID\u0026#34; message = \u0026#34;hello from your telegram bot\u0026#34; url = f\u0026#34;https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}\u0026amp;text={message}\u0026#34; response = requests.get(url) print(response.json()) Send a text message with curl: (code reference)\ncurl -X POST \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;chat_id\u0026#34;: \u0026#34;YOUR_CHAT_ID\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is a test from curl\u0026#34;}\u0026#39; \\ https://api.telegram.org/bot$YOUR_BOT_TOKEN/sendMessage It is done in a similar way In all languages, however, to know all the options that Telegram allows us to use, I recommend reading its documentation.\nCreate a Telegram bot Ok Arturo, we already know how to send a message, but what about the TOKEN and the CHAT_ID?\nSurely you are wondering that right now, this is the second point I was talking about at the beginning. The next thing you need is to create your bot, and for that you have to talk to BotFather, he will guide you to create your first bot. At the end of everything, a message will appear where you will see a token, this is the TOKEN we were talking about all the time, copy it and keep it in a safe place.\nNow the CHAT_ID is missing. This parameter already depends on how complete we want to make our bot, but initially we will want to know our CHAT_ID to start the tests, this is as simple as the previous steps. What we will have to do is make a GET request to this url: https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates. We can do this with the curl itself curl https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates or simply by accessing that url from our browser. It\u0026rsquo;s obvious but remember you have to change \u0026lt;token\u0026gt; to the TOKEN you just copied in the previous step.\nThere is nothing else to do, copy these two variables in your code, or save them as environment variables (recommended for security), or pass them as a parameter to the function as in the PHP example. Sending a message with a bot is that simple, the rest of the logic I leave to you, you can combine it with an arduino to notify you of the humidity in the house, to notify you when your team scores a goal\u0026hellip; limit is in your imagination.\nTelegram libraries to create a bot Of course, if what you want is to make a more complex bot, that sends photos, responds to messages, or other functionalities, I do not recommend that you implement the code yourself. With a simple Google search like “Telegram bot library in…” you add your favorite language, you will find thousands. I also recommend looking directly at Telegram\u0026rsquo;s own recommended libraries.\n","permalink":"https://arturo-source.github.io/posts/create-telegram-bot-from-0/","summary":"First steps to create a Telegram bot from scratch. Without external dependencies.","title":"Create Telegram Bot From scratch"},{"content":"Despite the fact that in the previous post all the necessary bases to start learning programming were explained, what I am going to show now are somewhat more advanced concepts , which no longer make up something basic and necessary to start programming. I want them to serve as an example of how to continue learning, and finally, I will leave some resources so that you can continue learning on your own. After that, all you have to do is figure out what you want to program next.\nRecursion in Go Recursion is something that exists in many languages, and is used in some computer problems because some problems turn out to be easier to solve. However, it is something that people often have a harder time understanding because it is not so easy to follow the flow of the program.\nNext we will see some recursion problems, although not in all of them the best solution is the recursive one (sometimes the best solution is the common programming, which is called imperative).\nSolve the Fibonacci sequence with recursion func fibonacci(n int) int { if n \u0026lt;= 1 { return n } return fibonacci(n-1) + fibonacci(n-2) } As we have said before, the recursive solution is not usually the most efficient, as it is in this case. However, it is an elegant solution, and easy to read.\nIf the number is less than or equal to 1, we return the number (the fibonacci of 0 is 0, and the fibonacci of 1 is 1). If not, we return the sum of the previous and the previous to the previous (the fibonacci of 2 is fibonacci(1) 1 + fibonacci(0) 0, the one of 3 is fibonacci(2) 1 + fibonacci(1) 1, and so on). With these two simple rules, which are the same as those stated in the Fibonacci sequence, we can solve the problem recursively.\nRead a file with Go Each programming language has its way of reading files, but each of them has its peculiarities. In Go we can go to the resource that I left you in the previous post (gobyexample). Personally, whenever I don\u0026rsquo;t remember how to do it (it\u0026rsquo;s usually common), I go to https://gobyexample.com/reading-files, and there I find a simple example.\nOf course, it depends on what we want to do, if it is a very large file, if we want to read it by lines, if the file is an image, etc. And for this we may have to do some more searching. But the simplest way to do it is as follows:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { dat, err := os.ReadFile(\u0026#34;/tmp/dat\u0026#34;) if err != nil { panic(err) } fmt.Print(string(dat)) } The first thing we do is import the os package, which is the one that allows us to read files. Then, in the main function, we call os.ReadFile, which receives as a parameter the path of the file we want to read. If everything went well, it returns an array of bytes, and an error. If the error is something other than nil, then there has been a problem, so we can stop the program with panic. It is not a good practice to use panic in normal program flow, but in this case, it is the easiest thing to do.\nIn case there is no error, we use fmt.Println that we have already seen in the previous post, to print the content of the file. But since the content of the file is a byte array, we convert it to a string with string(dat).\nRead json file with Go But, what is the point of reading a file to display its content? Well, not much, because we can do that with any program. What we will usually want to do is use the information that exists inside. In this case, we are going to read a json file, and we are going to use the information it contains.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type User struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // Read json file func ReadJson(filepath string) (User, error) { var user User file, err := os.Open(filepath) if err != nil { return user, err } defer file.Close() err = json.NewDecoder(file).Decode(\u0026amp;user) return user, err } func main() { user, err := ReadJson(\u0026#34;user.json\u0026#34;) if err != nil { panic(err) } fmt.Println(\u0026#34;Username:\u0026#34;, user.Username) fmt.Println(\u0026#34;Age:\u0026#34;, user.Age) } This code is bigger than what we\u0026rsquo;ve seen so far, but we\u0026rsquo;re going to go through it piece by piece so you can see how it works. We will first import encoding/json, which is the package that allows us to read json files. Along with os and fmt, which we have already seen.\nIf you have come this far, I assume you know what JSON is, but just in case, I leave you this Wikipedia link that may help you: https://en.wikipedia.org/wiki/JSON.\nIn other languages ​​like JavaScript, there is no need to define the structure, since the json can be read without knowledge of what the object is like. But in Go, we can\u0026rsquo;t do that, so we have to define the structure (just like in TypeScript).\nNext, we define a User structure, which is what we are going to find when reading the json. In this case, the json has two fields, username and age, and we are going to store them in the User structure. To do this, we use the json tag that allows us to indicate the name of the field in the json.\nNow let\u0026rsquo;s get to the important stuff. The ReadJson function receives as a parameter the path of the file we want to read. In this case, the file is called user.json. The function returns a User, and an error. If all went well, the error will be nil, as we have seen before. This is common behavior in Go, letting us know if there have been any errors.\nAt the beginning of the function we define a user variable of type User, which is what we are going to return. Then we open the file with os.Open, and if there were any errors, we return it. If not, we close the file with defer file.Close(). This is important, because if we don\u0026rsquo;t close the file, it can cause problems. defer allows us to execute a function at the end of the function in which it is defined. In this case, file.Close() will be executed at the end of the ReadJson function.\nNext, we create a JSON decoder, which will convert the bytes of the file (the text that we can read when opening it with a text editor), into a Go object. To do this, we use json.NewDecoder(file). And we store it in the user variable. To do this, we use Decode(\u0026amp;user). The \u0026amp; is something we haven\u0026rsquo;t seen so far, but I\u0026rsquo;m leaving it as homework for you to investigate on your own.\nAnd finally, we return the user and the error. If all went well, the error will be nil.\nWeb server with Go And this is the last thing we are going to see in this post. The rest of the learning you will have to do by yourselves, and for this I leave you some links at the end that can help you.\nLet\u0026rsquo;s create a web server in Go. To do this, we are going to use the net/http package, which is what allows us to create web servers. In other languages you would have to choose an external library, but in Go, it is already included. Then you can research frameworks that make your life easier, like gin or echo. However, Go\u0026rsquo;s default library is quite complete.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func headers(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026#34;%v: %v\\n\u0026#34;, name, h) } } } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } This example is again from gobyexample https://gobyexample.com/http-server. As we did before, the first thing will be to import the necessary libraries. For this example we will use the aforementioned net/http.\nIn this case, we have two functions, hello and headers. The first one simply returns a text, and the second one returns the headers of the request. For these concepts we may need some knowledge about http, but since it is not the subject to be treated, simply enter the url https://localhost:8090/hello and https://localhost:8090/headers to see the result.\nThe only thing we will do is define two routes, /hello and /headers, and associate them with the functions that we have defined before. Note that the functions no longer carry () as in all the occasions that we have used them before. This is because we are not executing them, but passing them as a parameter to another function (as if it were an int, or a float).\nLastly, we start the web server on port 8090.\nRest API with Go Effectively, we already have a web server, with just a few lines of code. But what if we want the server to return a json? Or receive a json? Or that it returns a json based on the parameters that we pass to it? Well, for that we may need a framework, which can make our lives easier, such as the aforementioned gin or echo.\nBut let\u0026rsquo;s use what we learned throughout the post, and we can create a web server that works with json with the knowledge we have.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;net/http\u0026#34; ) func myFunc(w http.ResponseWriter, req *http.Request) { json.NewEncoder(w).Encode(map[string]string{\u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34;}) } func main() { http.HandleFunc(\u0026#34;/myJson\u0026#34;, myFunc) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } With what you have learned, it should be easy to understand what is in this example. But let\u0026rsquo;s go with the explanation line by line.\nFirst, we import the encoding/json and net/http libraries. Next, we create a function myFunc. And in the main, as already mentioned, the first line declares the path /myJson that the myFunc function will respond to, and the second line starts the web server on port 8090.\nWhat happens in the myFunc function should be familiar to us, because before we have done it to decode (by reading the json file), but now what we want to do is encode it, this way we can send the information as bytes (the text that we can read with a text editor) to the client.\nThe weirdest thing is map[string]string{\u0026quot;hello\u0026quot;: \u0026quot;world\u0026quot;}, but it\u0026rsquo;s just a Go dictionary. In this case, the key is a string, and so is the value. You can research them at https://gobyexample.com/maps.\nConclusion Now there will be more questions in the air, but this is all part of learning. What you will have to do is investigate on your own, because that is what applies in real life when it comes to programming. When you have an idea about the project you want to do, search the internet for how to do it, surely there is someone who has had the same problem as you before.\nIf you want to continue learning in Go, I recommend you the following resources that will be a great help:\nhttps://go.dev/tour/ is an interactive Go tutorial, which will help you understand the concepts from the very basics to more advanced topics. https://roadmap.sh/golang is used to learn about the most popular Go libraries and how they relate to your needs depending on the project. ","permalink":"https://arturo-source.github.io/posts/learn-golang-2/","summary":"Learn more advanced concepts like reading a file, recursion, creating a server, and something else.","title":"Learn Golang from base (parte 2)"},{"content":"The script that I will talk about in this post can be downloaded here.\nA really simple php script to notify html changes in static pages Have you ever wanted to be aware of the changes of a website? You may want to see how the price of a product that interests you evolves, or you know what changes you want to see!\nWith this simple script you can do it in just a few seconds. Let\u0026rsquo;s look at the simple steps to configure the script. All you have to do is to set up settings.json file.\nFirst, you need to have installed PHP interpreter, and crontab on your computer or your server.\nVariables The variables you\u0026rsquo;ll need to change are:\n{ \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;check_changes\u0026#34;: true, \u0026#34;notify_telegram\u0026#34;: true, \u0026#34;chat_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bot_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xpaths\u0026#34;: { \u0026#34;Price\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Units for sale\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Page Title\u0026#34;: \u0026#34;/html/head/title\u0026#34; } } url (required) xpaths (required) chat_id (optional, for telegram notify) bot_token (optional, for telegram notify) Get url is very easy, you can copy it from the top of the browser. Get xpaths is a little harder, once you\u0026rsquo;re in the webpage, you have to right click on it. Then you select \u0026ldquo;Inspect\u0026rdquo; option. Then, you\u0026rsquo;ll see an arrow item as next one (left):\nNow you have to select the html item in the webpage, left click on that.\nThen, the html code will have been marked, so your last step is to right click on it, and select \u0026ldquo;Copy\u0026rdquo; \u0026gt; \u0026ldquo;XPath\u0026rdquo;\nThe final step is pasting it on json settings \u0026quot;Price\u0026quot;: \u0026quot;/html/body/main/div[4]/.......\u0026quot; (left is an identificator name, and right one is the xpath), and you\u0026rsquo;ll have the script configured (remember you can add all xpaths, as many as you want). But maybe you want to be notified when any change ocurred, so you have to configure notifications.\nNotifications It\u0026rsquo;s really easy too, if you\u0026rsquo;ve ever used Telegram. I asume you have Telegram account and a client to use it.\nCreate a bot. (Talk to @BotFather, it will guide you) Copy bot token. (You can paste it now on json settings, otherwise you will have to do it later) Talk your new bot. You can talk it directly, or create a group (or channel) with your friends and add the bot there. Access next url on your browser (don\u0026rsquo;t forget change \u0026lt;token\u0026gt; with your token): https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates You will get a json like the next one:\nThen you can pick the Telegram ChatID and paste it in the json settings too, remember notify_telegram has to be true to enable notifications. And you\u0026rsquo;ll have script totally configured. But now you have to decide how often you want to be notified.\nSet up crontab Crontab is a really usefull tool that you may have installed in your Linux computer or server. It helps you to do recurring tasks automatically. And it\u0026rsquo;s really easy to set up, but your first time use may will be confusing. You can access this page to configure crontab easily. The most common option will be on Sunday, at 12:00 for example, so you will type 0 12 * * 0 next to the command. But maybe you want to execute it always you turn on the computer, then you will type @reboot next to the command.\nTo open cron configuration you will open a terminal and type crontab -e, it allows you to edit cron configurations. You will open a file with an editor, it may will be nano. So you only have to paste the next command and let it be:\n* * * * * php /route/to/script/check-change.php And finally save set up with ctrl+o and close editor with ctrl+x.\nOther posible configuration is to check webpage all days at certain hour, but you want to be notified even if it\u0026rsquo;s been changed or not. It\u0026rsquo;s easy too. You only have to set check_changes to false in json settings, this will make it not distinguish if there are changes or not, and if you have notify_telegram with true value, it\u0026rsquo;ll notify you anyway. This is an example to be notified all day at 12:00\n0 12 * * * php /route/to/script/check-change.php And that\u0026rsquo;s it. Thanks to arrive since here, I hope i could help you.\n","permalink":"https://arturo-source.github.io/posts/check-webpage-changes/","summary":"A PHP script that you can easily configure to check for changes to a web page, and notify you via Telegram.","title":"Check Webpage Changes"},{"content":"Learn Golang, the language developed by Google This post is based on the following video on my channel. This video is in Spanish, but if you know Spanish, you can see it here:\nBut dont worry if you dont know Spanish, I\u0026rsquo;ll let all explained here. The things you will need to follow this tutorial are the following:\nAn editor (VSCode): https://code.visualstudio.com/ The Go compiler: https://go.dev/dl/ \u0026ldquo;Hello world\u0026rdquo; in Go The first program that all programmers write is always the well-known \u0026ldquo;Hello world\u0026rdquo;. In Go language it would be written as follows:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello world\u0026#34;) } You just need to create a text file called \u0026ldquo;main.go\u0026rdquo;, copy this piece of code and continue with the next thing we are going to learn.\nHow to compile in Go Compiling with the Go language is very simple, there are two main ways. We typed in the terminal go build main.go and an executable would be generated, which we could run from a terminal by typing ./main.\nThe second way and the one we will use throughout the tutorial is go run main.go. In this way we will be compiling and executing the program in a single instruction, which is what we need to start with.\nNow do it yourself in the terminal and you should see a \u0026ldquo;Hello world\u0026rdquo; being written to the console.\nWrite comments in Golang Comments are something that all languages have, and they can have multiple uses, one of them would be to comment the code. It is advisable not to abuse so that there is no unreadable code. They are written with a double slash at the beginning // or if you are going to write several lines, at the beginning you put /* and at the end */.\nThis would be an example of a comment, although a bad example because it messes up the code:\npackage main import \u0026#34;fmt\u0026#34; func main() { // Println is used to print whatever is between \u0026#34;\u0026#34; to the console fmt.Println(\u0026#34;Hello world\u0026#34;) } What is a variable? Variables in Go There are several types of variable in programming, the basic ones are int, float, string and bool. Each type of variable has a use.\nint is for doing operations with integers (addition, subtraction, etc.) float is the same as int but with decimal numbers string is a variable type for character strings (eg \u0026ldquo;Hello world\u0026rdquo;) bool can only be two things true and false. In the following code we will declare the variables age as int, euros as float, name as string, and shine as bool.\npackage main import \u0026#34;fmt\u0026#34; func main() { var int age age = 10 fmt.Println(\u0026#34;I\u0026#39;ll be\u0026#34;, age+5, \u0026#34;in 5 years\u0026#34;) var euros float32 euros = 10.3 fmt.Println(\u0026#34;If I have\u0026#34;, euros, \u0026#34;and I spend half, I will have\u0026#34;, euros/2) var name string name = \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;My name is\u0026#34;, name) var shines bool shines = true fmt.Println(\u0026#34;The value of shines is\u0026#34;, shines) } It should be noted that, unlike other languages, it is not necessary to say the type of a variable explicitly in Go, but when you are learning you may prefer to start by declaring them explicitly to find out what you are doing. The same code can be written as follows:\npackage main import \u0026#34;fmt\u0026#34; func main() { age := 10 fmt.Println(\u0026#34;My age in 5 years is\u0026#34;, age+5) euros := 10.3 fmt.Println(\u0026#34;If I have\u0026#34;, euros, \u0026#34;and I spend half, I will have\u0026#34;, euros/2) name := \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;My name is\u0026#34;, name) shines := true fmt.Println(\u0026#34;The value of shines is\u0026#34;, shines) } Math operations in Go All programming languages have mathematical operations, such as adding, subtracting, multiplying, dividing, etc. The symbols that you will use to perform these operations are the following:\n+: Used to add -: Used to subtract *: Used to multiply /: Used to divide %: Is the module (rest of the division) ^: Used to raise to power package main import \u0026#34;fmt\u0026#34; func main() { var int number = 10 fmt.Println(\u0026#34;Number is\u0026#34;, number) fmt.Println(\u0026#34;The number + 1 is\u0026#34;, number+1) fmt.Println(\u0026#34;Number - 1 is\u0026#34;, number-1) fmt.Println(\u0026#34;Number * 2 is\u0026#34;, number*2) fmt.Println(\u0026#34;The number / 2 is\u0026#34;, number/2) fmt.Println(\u0026#34;The number % 2 is\u0026#34;, number%2) fmt.Println(\u0026#34;Number ^ 2 is\u0026#34;, number^2) } Conditional structures in Go (if and else) Boolean variables (bool) are often used in this context. Let\u0026rsquo;s look at the following code:\npackage main import \u0026#34;fmt\u0026#34; func main() { var shines bool shines = true if shines { fmt.Println(\u0026#34;The object shines\u0026#34;) } } If you copy and paste it into your main.go file, and run the following command mentioned above go run main.go you will get \u0026ldquo;The object shines\u0026rdquo; as output.\nCool! But before you told me that bool can be true, or false, what is the false option for? Well, in the if syntax it can always be accompanied by an else. Whatever is inside the {} brackets will be what will be executed when the value of shine is false. Try the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var shines bool shines = false if shines { fmt.Println(\u0026#34;The object shines\u0026#34;) } else { fmt.Println(\u0026#34;Object DOES NOT shine\u0026#34;) } } If you now run the command go run main.go what output do you get?\nIf you\u0026rsquo;ve already tried it, you\u0026rsquo;ll see that you\u0026rsquo;ll get \u0026ldquo;Object DOES NOT shine\u0026rdquo;, and this is because the value of glows has been changed to false.\nComparators inside an if In many cases, you will not have to declare a boolean variable to use ifs, what you will do is use comparisons. Symbols used in programming are:\n\u0026gt; To indicate greater than. \u0026gt;= To indicate greater than or equal to. \u0026lt; To indicate less than. \u0026lt; To indicate less than or equal to. == To indicate if they are equal. != To indicate if they are different. package main import \u0026#34;fmt\u0026#34; func main() { claudio_height := 1.70 victor_height := 1.62 if claudio_height \u0026gt; victor_height { fmt.Println(\u0026#34;Claudio is taller than Victor\u0026#34;) } else { fmt.Println(\u0026#34;Victor is taller than Claudio\u0026#34;) } } But now we have one more case, Claudio and Victor may not be one higher than the other, we have to consider the option that both are equally tall. To do this, use the last case that can occur within a conditional structure, which is the else if. It is used to express an option that is not included in \u0026ldquo;the rest of the options\u0026rdquo;. Let\u0026rsquo;s look at the example:\npackage main import \u0026#34;fmt\u0026#34; func main() { claudio_height := 1.70 victor_height := 1.62 if claudio_height \u0026gt; victor_height { fmt.Println(\u0026#34;Claudio is taller than Victor\u0026#34;) } else if victor_height \u0026gt; claudio_height { fmt.Println(\u0026#34;Victor is taller than Claudio\u0026#34;) } else if claudio_height == victor_height { fmt.Println(\u0026#34;Claudio and Victor are the same height\u0026#34;) } } Note that we can use if, else if and else all in the same statement. In this case try copying the above code and running go run main.go again. Now try changing the height values ​​to see the different results. You will see that what appears in the terminal is changing.\nMore than one condition in an if You can use more than one condition in an if. The operators used to add more conditions to an if are:\n\u0026amp;\u0026amp; To indicate that both conditions must be met. || To indicate that at least one condition must be met. ! To indicate that the opposite condition must be met. Let\u0026rsquo;s look at the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var hour int = 12 if hour \u0026gt; 8 \u0026amp;\u0026amp; hour \u0026lt; 18 { fmt.Println(\u0026#34;We are in business hours\u0026#34;) } else { fmt.Println(\u0026#34;We are out of business hours\u0026#34;) } } We can see that if the time is greater than 8 and less than 18, the program prints \u0026ldquo;We are in working hours\u0026rdquo;, that is, the time must be between those two values, but not exactly those values. If we wanted to include all 8 and 18 we would use the familiar \u0026gt;= and \u0026lt;= operators.\nThe operation with || is easily understood because it is a logical operation that is executed if any of the conditions is true. Unlike \u0026amp;\u0026amp; which is only executed if both conditions are true.\nBut what remains to be seen is how ! is used. Let\u0026rsquo;s look at the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var money int = -5 if !(money \u0026gt; 0) { fmt.Println(\u0026#34;You have a negative balance\u0026#34;) } } Now if you have run this program with go run main.go you will get the program to print \u0026ldquo;You have a negative balance\u0026rdquo;. This is because money is NOT greater than zero, money \u0026gt; 0 equals false, but the ! operator changes it to true.\nWe would get the same result if we had put the statement money \u0026lt;= 0 which is just the opposite of money \u0026gt; 0.\nArrays in Golang If we want to have a set of data in all languages, we do not declare the variables one by one, as we have done so far claudio_height, victor_height, etc. What we will do is use an Array. The syntax would be the following:\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) } However, we can simplify it as before, using :=\npackage main import \u0026#34;fmt\u0026#34; func main() { heights := []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) } Copy either of the two codes and run it to see the output in the console.\nWell, arrays are collections of data, but what are they for? When you want to do operations with a lot of data, like a summation, you will need to iterate through all the data, and this is why we need to combine arrays with loops.\nLoops in Golang Before starting in a complicated way, let\u0026rsquo;s go with the simplest. If we want to write to the console all the numbers from 0 to 10, what we will do is write the following code:\npackage main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt;= 10; i++ { fmt.Println(i) } } This code will write all the numbers from 0 to 10 to the console when executing go run main.go. But we are going to analyze it step by step because many new concepts have entered here.\nWhat is between the word for and the open bracket { separated by ; is the following:\ni := 0 initializes the value of the variable i to 0. i \u0026lt;= 10 is a comparison of less than or equal to 10. i++ increments the value of i by 1. That is, the initial value is 0, and it has been stored in a variable called i. And what\u0026rsquo;s inside the {} brackets will be executed until the comparison is false, in this case, until i equals 11. Finally we use the ++ operator, which we haven\u0026rsquo;t seen before, but it is very useful when we use loops because it increments the variable one by one.\nLoop through arrays in Go Now we return to the arrays. Once we know the syntax in Go loops, we are going to combine this knowledge with arrays. Now we want to access all the values inside the array, because what we will do is the following.\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) for i := 0; i \u0026lt; len(heights); i++ { fmt.Println(\u0026#34;The height number\u0026#34;, i, \u0026#34;is\u0026#34;, heights[i]) } } Run it with go run main.go and you will see the output. Again we see new things, now between the for and the bracket { is the statement i \u0026lt; len(heights) where before there was an i \u0026lt;= 10. And it is that when we use len() it will return the total amount of values in the array, in this case we see that there are 4.\nAlso, at the end of the Println we have written heights[i]. When we use the array brackets [] we indicate the position we want to access from the array. In the first case, i is equal to 0. The latter is a bit counterintuitive because humans have always started counting from 1, but machines start counting from 0, so the first position in the array is position 0. Next would be positions 1, 2 and 3.\nThere are more ways to use for, but with this we will know the basics.\nAnother type of loop in Go It should be noted that in other languages it is possible to use while. In Go there is no such keyword, but we can use for as if it were a while.\nThe while is a loop that runs while the condition is true. It is similar to if since we only have to write the condition and the body of the loop.\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 0 for i \u0026lt;= 10 { fmt.Println(i) i++ } } This program should do the same thing as the first one we wrote in the loop explanation, the loop will run 11 times, writing the numbers 0 to 10.\nLast review to refresh conditions and loops By now you should know how to use ifs and fors. Now we are going to combine both to understand them perfectly. Let\u0026rsquo;s iterate through all the values in an array and decide if it\u0026rsquo;s high enough.\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) for i := 0; i \u0026lt; len(heights); i++ { if heights[i] \u0026gt; 1.65 { fmt.Println(\u0026#34;The number person\u0026#34;, i, \u0026#34;is quite tall\u0026#34;) } else { fmt.Println(\u0026#34;The person number\u0026#34;, i, \u0026#34;is not tall enough\u0026#34;) } } } Try running the code with go run main.go and understand the output.\nFunctions in Go The last thing you have to learn to know the basics of programming is functions. Functions are a way of organizing our code, and it\u0026rsquo;s a way of reusing code. We must give them a name that makes the code more easily readable.\nIn Go we will write the word func, then the name of the function, and then in parentheses the arguments that the function receives.\npackage main import \u0026#34;fmt\u0026#34; func CalculatePriceWithVAT(price float32) float32 { return price * 1.21 } func main() { price := CalculatePriceWithVAT(10.0) fmt.Println(price) } As we can see, the CalculatePriceWithVAT function receives an argument of type float32, and returns an argument of type float32. Not all functions need to return something, but if they do, we need to put after the closing parenthesis ) and before the opening bracket { the type of variable that the function returns.\nIf we wanted to create a function that returns nothing, it would be as simple as the following:\npackage main import \u0026#34;fmt\u0026#34; func SayHelloTo(string name) { fmt.Println(\u0026#34;Hello\u0026#34;, name) } func main() { SayHelloTo(\u0026#34;Arturo\u0026#34;) } Within the functions we can introduce all the logic we want, it does not have to be a few lines as we have done so far. For example, let\u0026rsquo;s go a little further with the difficulty and check if a number is prime:\nA number is prime if it is only divisible by 1 and itself.\npackage main import \u0026#34;fmt\u0026#34; func IsPrime(int number) bool { for i := 2; i \u0026lt; number; i++ { if number%i == 0 { return false } } return true } func main() { fmt.Println(\u0026#34;Is number 7 prime?\u0026#34;, IsPrime(7)) } This function is somewhat more difficult than the first ones because it contains more than one return, but it is perfect to understand how easy it is to write logic from human words to a function.\nConclusion If you have come this far, I hope you have understood everything we have seen in this post. If not, don\u0026rsquo;t worry, we can reread it as many times as you want. In order not to extend the post further, what I am going to recommend is that, once you understand all the concepts that are explained, go to the page https://gobyexample.com/ where you will find more examples that increase in difficulty but They are more powerful things that will help you make the most of your programming knowledge.\nAnd don\u0026rsquo;t forget to share this post with your fellow Go learners.\n","permalink":"https://arturo-source.github.io/posts/learn-golang/","summary":"What\u0026rsquo;s a variable? How to do an if? And a loop? Learn all the basics you need to start programming, in a easy language as Go.","title":"Learn Golang from base"}]