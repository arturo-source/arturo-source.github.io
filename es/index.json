[{"content":"Un servidor web es un software que implementa el protocolo HTTP. Normalmente se accede usando un navegador web (Chrome, Firefox, etc.). Al ser un estándar, existen múltiples implementaciones de servidores web: Apache y Nginx son los más conocidos y usados.\n¿Cómo usar tu propio servidor web? Más adelante verás cómo crear uno propio, pero lo más común es que quieras usar uno ya existente. Aunque Apache y Nginx sean los más usados, te recomiendo usar Caddy, puesto que la configuración de los dos anteriores puede llegar a ser tediosa.\nInstala Caddy, en cada sistema operativo será distinto. Y ahora crea un archivo de configuración llamado Caddyfile:\nhttp://localhost:8080 root * ./my-website file_server Lo siguiente será crear algo de contenido estático, aunque los servidores anteriormente mencionados pueden ejecutar código (por ejemplo PHP), el contenido que entenderá tu navegador es HTML. Crea una carpeta my-website al lado del Caddyfile, y crea el html ./my-website/index.html:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My first web server\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Por último, ejecuta caddy start, y accede en tu navegador a http://localhost:8080/ , deberías ver \u0026ldquo;Hello world!\u0026rdquo; en tu navegador.\n¿Cómo funciona? Te recomiendo usar curl, en lugar del navegador, para ver qué está pasando a bajo nivel:\ncurl http://localhost:8080 -v La salida de la terminal será algo parecido a esto:\n* Host localhost:8080 was resolved. * IPv6: ::1 * IPv4: 127.0.0.1 * Trying [::1]:8080... * Connected to localhost (::1) port 8080 * using HTTP/1.x \u0026gt; GET / HTTP/1.1 \u0026gt; Host: localhost:8080 \u0026gt; User-Agent: curl/8.11.1 \u0026gt; Accept: */* \u0026gt; * Request completely sent off Lo que ves con el símbolo \u0026gt; son los bytes que envía curl a tu servidor.\n\u0026lt; HTTP/1.1 200 OK \u0026lt; Accept-Ranges: bytes \u0026lt; Content-Length: 149 \u0026lt; Content-Type: text/html; charset=utf-8 \u0026lt; Etag: \u0026#34;sqpjdl45\u0026#34; \u0026lt; Last-Modified: Sun, 26 Jan 2025 18:00:57 GMT \u0026lt; Server: Caddy \u0026lt; Date: Sun, 26 Jan 2025 18:14:31 GMT \u0026lt; ...here goes your html... * Connection #0 to host localhost left intact Lo que ves con el símbolo \u0026lt; son bytes que te ha respondido el servidor.\nEl protocolo HTTP funciona de la siguiente manera, como habrás apreciado la request se compone de:\nPrimera linea: verbo - ruta - version HTTP (el verbo puede ser GET, POST, PUT\u0026hellip;).\nUna cabecera por cada linea (nombre, doble punto, valor).\nDoble salto de linea.\nCuerpo de la request (no se ve porque las peticiones GET no tienen cuerpo).\nDoble salto de linea (en caso de que hayas puesto un cuerpo).\nLos saltos de linea son importantes porque indican la finalización de una sección, pero para estar seguro dónde termina el cuerpo, deberás usar la cabecera Content-Length, como puedes ver en la response.\nY la response será algo paredido:\nPrimera linea: versión HTTP - código - explicación.\nUna cabecera por cada linea (nombre, doble punto, valor).\nDoble salto de linea.\nCuerpo de la response (en este caso es html, pero podría ser otro contenido).\nDoble salto de linea.\nCrea tu primer servidor web desde cero Si has entendido el anterior punto, ya estás preparado para crear tu propio servidor web. No es algo que sea necesario, en el 99% de los casos quieres un servidor ya existente, pero es un ejercicio interesante de hacer.\nEl siguiente es un ejemplo muy básico de cómo programaría un servidor web usando Go. Solo contemplo el mejor caso, en el que la solicitud es correcta, pero obviamente habría que contemplarlos todos. Te animo a que hagas lo mismo en otro lenguaje, y lo amplies, para ver si has entendido los conceptos.\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net\u0026#34; \u0026#34;strings\u0026#34; ) func main() { listener, err := net.Listen(\u0026#34;tcp\u0026#34;, \u0026#34;:8080\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error starting:\u0026#34;, err) return } defer listener.Close() fmt.Println(\u0026#34;Server listening on http://localhost:8080\u0026#34;) for { conn, err := listener.Accept() if err != nil { fmt.Println(\u0026#34;Error accepting connection:\u0026#34;, err) continue } go handleConnection(conn) } } func handleConnection(conn net.Conn) { defer conn.Close() reader := bufio.NewReader(conn) requestLine, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil { fmt.Println(\u0026#34;Error reading the request:\u0026#34;, err) return } requestParts := strings.Split(strings.TrimSpace(requestLine), \u0026#34; \u0026#34;) if len(requestParts) \u0026lt; 3 { fmt.Println(\u0026#34;Malformed request:\u0026#34;, requestLine) return } method, path, httpVersion := requestParts[0], requestParts[1], requestParts[2] fmt.Printf(\u0026#34;Request received: %s %s %s\\n\u0026#34;, method, path, httpVersion) for { line, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil || line == \u0026#34;\\r\\n\u0026#34; { break } } responseBody := \u0026#34;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;My first web server\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34; response := fmt.Sprintf(\u0026#34;%s 200 OK\\r\\n\u0026#34;, httpVersion) + \u0026#34;Content-Type: text/html\\r\\n\u0026#34; + fmt.Sprintf(\u0026#34;Content-Length: %d\\r\\n\u0026#34;, len(responseBody)) + \u0026#34;\\r\\n\u0026#34; + responseBody _, err = conn.Write([]byte(response)) if err != nil { fmt.Println(\u0026#34;Error sending response:\u0026#34;, err) } } Para ver si está funcionando, ejecuta tu programa, en este caso go run main.go, y entra en tu navegador en http://localhost:8080/ , deberías ver la misma web que antes. Prueba a usar curl y ver las diferencias con caddy.\n","permalink":"https://arturo-source.github.io/es/posts/que-es-servidor-web/","summary":"Lo usas a diario, y ahora aprenderás qué es, desde lo más básico.","title":"¿Qué es un servidor web?"},{"content":"¿Qué es un túnel inverso? Un túnel inverso es una técnica que permite a tu servidor acceder a recursos de tu ordenador local. Aunque no tengas una IP pública, o estés detrás de una NAT. Además, al crear un túnel a través de SSH, los recursos locales de tu ordenador son accedidos por el servidor de manera cifrada.\nPuede que lo que buscas sea crear un túnel normal, y no uno inverso, y esto lo explico en este otro artículo.\n¿Qué diferencia hay entre un túnel SSH normal, y un túnel reverso? Con un túnel normal puedes acceder a recursos del servidor, aunque sean privados. O usar el servidor como proxy, para acceder a recursos que no puedes desde tu ordenador.\nUn tunel reverso es justo lo contrario, el servidor es el que accede a tus recursos. Un ejemplo puede ser acceder a tu Raspberry Pi desde fuera de tu casa, tendrías que ejecutar un SSH reverso desde tu Raspberry Pi a un servidor con IP pública. Entonces, podrías conectarte al servidor con IP pública por SSH, y dentro de él, conectarte a tu Raspberry Pi, usando SSH otra vez.\nIncluso, también podrías utilizar tu Raspberry Pi como proxy, a través del cual el servidor se puede conectar a un servidor de archivos que tengas alojado de tu casa.\n¿Cómo se crea un túnel inverso? El comando es muy sencillo, una vez lo has entendido:\nssh -N -R localhost:8888:fileserver.home:80 user@server.com La opción -N ejecuta SSH de manera no interactiva, porque no necesitamos abrir una shell en server.com. Prueba a no ponerlo y lo entenderás. La opción -R es la que crea el túnel inverso. Seguida de ella configuraremos el tunel. localhost:8888 es donde el servidor va a llamar, para conectar con la Raspberry. Prueba a quitar localhost, y deja solo 8888:fileserver.home:80, debería funcionar igual. fileserver.home:80 es donde tengo corriendo mi servidor de archivos en casa (mi router resuelve fileserver.home con la IP de mi servidor de archivos casero). Y user@server.com es lo que siempre usamos en SSH para acceder, el nombre de tu usuario, arroba, y el nombre del dominio (o IP) del servidor. Si ahora accedes al servidor remoto con ssh user@server.com, puedes hacer ejecutar curl localhost:8888, verás que obtienes una respuesta de tu casa. Por supuesto, si en tu servidor tenías un proceso corriendo en el puerto 8888, usa cambia localhost:8888 por uno que esté libre.\nSi no quieres acceder a un aparato de tu casa, sino directamente a tu Raspberry Pi (por VNC, por ejemplo), ejecuta lo siguiente:\nssh -N -R localhost:8888:localhost:5901 user@server.com Al cambiar fileserver.home:80 por localhost:5901, le estás diciendo al servidor que puede acceder a tu servicio VNC dentro de la Raspberry Pi, a través de localhost:8888.\n","permalink":"https://arturo-source.github.io/es/posts/tunel-ssh-inverso/","summary":"Comprende qué es un túnel SSH reverso, cómo configurarlo, y cuál es la diferencia con un túnel normal.","title":"Qué es un túnel SSH inversos y cómo configurarlo"},{"content":"¿Qué es un tunel SSH? SSH es una aplicación para comunicarte con otros ordenadores de manera cifrada. Normalmente te conectas al servidor con ssh user@public.site, pero si utilizas el parámetro -L crearás un tunel a través del servidor.\nY, ¿qué es un tunel SSH? Pues, como un tunel de la vida real, un tunel comunica un punto A, y un punto B. El punto A es tu ordenador, y el punto B NO es el servidor de public.site, sino el sitio al que quieras llegar, digamos private.site. Es decir, public.site no es el punto B, ¡sino que es el tunel!\nSi lo que quieres es saber cómo hacer un tunel reverso, lo explico en este otro artículo.\n¿Qué utilidad tiene el tunel SSH? La funcionalidad de un tunel SSH es muy similar a la de un VPN, nos permite hacer peticiones a private.site simulando que somos public.site. Al igual que con una VPN, nuestra conexión está cifrada. Y, además, podemos saltarnos restricciones de puertos por el firewall, ya que estamos accediendo mediante un puerto SSH abierto.\n¿Cómo se crea un tunel SSH? El comando es muy sencillo, una vez lo entiendes:\nssh -N -L localhost:8000:private.site:80 user@public.site La opción -N ejecuta SSH de manera no interactiva, porque no necesitamos abrir una shell en public.site. Prueba a no ponerlo y lo entenderás. La opción -L es la que crea el tunel. Seguida de ella configuraremos el tunel. localhost:8000 es dónde vamos a colocar el origen del tunel (el punto A por el que vamos a entrar). Prueba a quitar localhost, y deja solo 8000:private.site:80, debería funcionar igual. private.site:80 es donde vamos a colocar el destino del tunel (el punto B, donde queremos llegar con el tunel). Y user@public.site es lo que siempre usamos en SSH para acceder, el nombre de tu usuario, arroba, y el nombre del dominio (o IP) del servidor. Si ahora abres un navegador, y escribes http://localhost:8000, deberías ver private.site, aunque normalmente no pudieses, ya sea por restricciones de tu país, o porque es un sitio no accesible desde una red pública.\nSi lo que quieres es acceder a un puerto dentro de public.site que no es público, y está cerrado por el firewall, puedes hacer lo mismo, pero cambiando private.site, por localhost:\nssh -N -L localhost:1234:localhost:1234 user@public.site Ahora deberías poder acceder al servicio en el puerto public.site:1234 desde localhost:1234.\n","permalink":"https://arturo-source.github.io/es/posts/tunel-ssh/","summary":"Comprende los túneles SSH y configura tu primer túnel en un par de minutos.","title":"Qué es y cómo configurar un túnel ssh"},{"content":"Para conectarte a un servidor, normalmente usarías ssh user@domain.com, y para copiar un archivo scp file.txt user@domain.com:/home/user/. Después de ejecutar el comando, te pedirá la contraseña de user, pero esto es poco seguro, y pesado. La forma correcta es utilizar un par de claves pública-privada, y de esa forma no tendrás que volver a ingresar la contraseña.\nGenerar claves SSH El primer paso es abrir tu terminal y escribir ssh-keygen. Este comando acepta algunos comandos de configuración como ssh-keygen -t rsa para elegir el sistema de cifrado (puedes elegir entre dsa, ecdsa, ecdsa-sk, ed25519, ed25519-sk, rsa). Te aparecerá el siguiente prompt:\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/arturo/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/arturo/.ssh/id_rsa Your public key has been saved in /home/arturo/.ssh/id_rsa.pub The key fingerprint is: SHA256:xJM27ZnRIMl/OSWA1B8H9cPDN4lSKGa8QKXs3VA3pmY arturo@localhost The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | .+==oooB. | | .o=Oo+B B..| | o@o=E.B Bo| | .o.=*+* =| | .S.+o . | | | | | | | | | +----[SHA256]-----+ El \u0026ldquo;randomart image\u0026rdquo; variará, ya que la clave que se ha generado es distinta cada vez que se ejecuta. Puedes cambiar los valores del prompt, como la ruta donde se guarda la clave. En este caso, mis claves pública y privada han sido almacenadas en /home/arturo/.ssh/ (abreviado ~/.ssh/), con el nombre de id_rsa.pub y id_rsa.\nLogearte en el servidor sin usar contraseña El segundo (y último) paso es hacer que el servidor te pueda identificar. Para ello, tendrás que copiar tu clave pública ~/.ssh/id_rsa.pub en el servidor. La forma más sencilla de hacerlo es ssh-copy-id -i ~/.ssh/id_rsa.pub user@domain.com. Te aparecerá el siguiente prompt en el que tienes que poner la contraseña de user:\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \u0026#34;/home/arturo/.ssh/id_rsa.pub\u0026#34; /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@172.21.0.2\u0026#39;s password: Simplemente introduce la contraseña de user y ya podrás acceder al servidor simplemente con ssh user@domain.com, sin tener que escribir la contraseña.\nAlternativa sin ssh-copy-id Una forma alternativa, si no quieres (o no puedes) usar ssh-copy-id, es copiar tu clave pública manualmente en el servidor. Para ello, tendrás que copiar el contenido de ~/.ssh/id_rsa.pub, para verlo ábrelo, o ejecuta cat ~/.ssh/id_rsa.pub:\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDCY+hLD34jAoCrin5sRN1mclVxhaykt0pRdvsLxFJxypkwALqb18nx3ryYNNKygWnpmR4hmD19wHGVZZi7nUrgUcMbES03RvOdigIasfgjGR/dijs3b+HhEZ+iyJJjkOQumEm+0en4lKsh8nWecrb6FsMLRXBvPsB5lhr4bu15dP7/Ui/55LRyP/6MpszhQufS6xlaWXa2lY1dRPY/XDuWE+datnsZAPqn6KM2TQOQAvo1IPj3lwShMLuyzEfwSMQKBM+y+ltu0k/ogra1pk+PRcGEqEnjkojTmS/tigOoa9u+Zo4CDBCsTjZViaFI6aRs/+FHmfrmlWz91J1dleMhp8feIlsfhnwAFRvRvd6yYzY8N10MnixwRjw1cyNDwJgBojmjfHsz879KtkF4lQ934e1nXIrIPos7thT7tx0e4TEpmNZiB5XpIPZe8AERzyYTNqFN9pOVRIlelakjATKxrjiiNZTVJrbcMA7yIXb8BgW0kyJb1AZgSUFqcpOsLQE= arturo@localhost Entonces, accede al servidor, puede que tengas una forma de acceder sin SSH, porque algunos proveedores de VPS te permitirán acceder de otras formas. Sino, simplemente ssh user@domain.com. Abre el archivo /home/user/.ssh/authorized_keys (abreviado ~/.ssh/authorized_keys), o créalo si no existe, ejecutando nano ~/.ssh/authorized_keys.\nPor último, pega el contenido que acabas de copiar. Ya deberías poder acceder al servidor con ssh user@domain.com desde tu máquina.\nAñadir más seguridad Por lo general, no querrás que los usuarios accedan a tu servidor domain.com mediante SSH con contraseña. Esto podría hacer que sufras ataques SSH para intentar vulnerar el servidor. Para ello simplemente abre el archivo con nano /etc/ssh/sshd_config, busca la línea donde ponga PasswordAuthentication, quitas la almohadilla, y escribes PasswordAuthentication no.\n","permalink":"https://arturo-source.github.io/es/posts/conectarse-por-ssh-sin-contrase%C3%B1a/","summary":"No vuelvas a escribir una insegura contraseña para acceder por SSH. Aprende a usar claves públicas-privadas.","title":"Cómo conectarse por SSH sin usar contraseña"},{"content":"El objetivo de este artículo es convertir mi aplicación de terminal poker-odds, en una aplicación que se pueda usar en el naveegador.\nPara este ejemplo utilizaré tinygo, que es un compilador de Go para microprocesadores, que también produce código WASM. Si quieres ver cómo se hace con el compilador de Go normal, puedes verlo en la wiki de Go.\nCompilar el código de Go Recuerda tener el compilador de tinygo instalado. Para compilar el código de Go a código WASM, utilizaré el siguiente comando:\ntinygo build -o wasm.wasm -target wasm ./main.go tinygo es el compilador. build sirve para compilar el código. -o wasm.wasm le indico dónde quiero que se guarde el WASM compilado. -target wasm le indico que quiero compilar a WASM, y no a un microprocesador. ./main.go es donde está el código Go. Dentro del archivo ./main.go, tendré un código como el siguiente:\npackage main func main() {} //export multiply func multiply(x, y int) int { return x * y; } Es muy importante el comentario //export multiply. Sin él, no podrás ejecutar la función desde JavaScript.\nEjecutar el código de Go desde JavaScript Una vez el código ha sido compilado, hay que cargar el código en el navegador, la manera más sencilla es creando un index.html.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;/wasm_exec.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const go = new Go(); // Defined in wasm_exec.js const WASM_URL = \u0026#39;/wasm.wasm\u0026#39;; var wasm; if (\u0026#39;instantiateStreaming\u0026#39; in WebAssembly) { WebAssembly.instantiateStreaming(fetch(WASM_URL), go.importObject).then(function (obj) { wasm = obj.instance; go.run(wasm); }) } else { fetch(WASM_URL).then(resp =\u0026gt; resp.arrayBuffer() ).then(bytes =\u0026gt; WebAssembly.instantiate(bytes, go.importObject).then(function (obj) { wasm = obj.instance; go.run(wasm); }) ) } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; A la vista quedan dos scripts. El primero carga un archivo wasm_exec.js. Es importante, porque es lo que hace que puedas ejecutar const go = new Go(); posteriormente. Puedes encontrar este fichero dentro de tu sistema operativo, ejecutando el siguiente comando en Linux:\nfind / -name wasm_exec.js Este comando buscará todos los archivos en tu sistema operativo llamados wasm_exec.js. Yo lo copiaré en la misma carpeta que mi index.html.\nTambién lo encontrarás en https://github.com/tinygo-org/tinygo/blob/release/targets/wasm_exec.js, pero puedes tener problemas si la versión de tinygo de GitHub no es la misma que la tuya.\nIniciar un servidor HTTP Existen multiples formas de tener un servidor HTTP rápidamente. Abre una terminal, y ve a la carpeta donde tengas el wasm_exec.js, index.html, y wasm.wasm.\nCon lenguajes interpretados como python puedes poner simplemente python -m http.server 8000. Para PHP php -S 127.0.0.1:8000. Cualquiera de los dos comandos abrirá un servidor HTTP en el puerto 8000, pero si prefieres compilar un pequeño servidor con Go, copia lo siguiente:\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { port := flag.String(\u0026#34;p\u0026#34;, \u0026#34;8000\u0026#34;, \u0026#34;port to serve\u0026#34;) directory := flag.String(\u0026#34;d\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;directory to host\u0026#34;) flag.Parse() http.Handle(\u0026#34;/\u0026#34;, http.FileServer(http.Dir(*directory))) log.Printf(\u0026#34;Serving %s on: http://127.0.0.1:%s\\n\u0026#34;, *directory, *port) log.Fatal(http.ListenAndServe(\u0026#34;:\u0026#34;+*port, nil)) } Compila el código con go build, y ejecutalo. Recuerda que puedes cambiar las opciones -p para cambiar el puerto, y -d para la carpeta que quieres servir.\nAhora sí, a multiplicar usando Go desde JavaScript Después de un largo proceso, ya puedo ejecutar el código WASM. Entro a la url http://127.0.0.1:8000/, me aparece una página en blanco, pero si abro las herramientas de desarrollador (pulsando F12, ctrl + shift + i, o como se haga en tu navegador/sistema operativo). Y en la terminal de JavaScript escribo wasm.exports.multiply(4,5), y la función devuelve 20.\nCrear la herramienta de poker-odds en HTML Ahora ya tengo una función que multiplica en Go, que se puede llamar desde JavaScript, mediante WASM. No tiene que ser tan difícil portar mi código. Lo primero que voy a hacer es un fork de mi repositorio, porque la aplicación está completamente pensada para ser usada desde terminal, así que habrá que cambiar bastantes cosas. Este es el nuevo repositorio que funcionará con WASM.\nHacer el fork de poker-odds Para hacer el fork, he tenido que crear un repositorio desde cero (porque no puedes hacer forks de tus propios repositorios), clonar el repositorio original, cambiar el remote origin url, y hacer un push al nuevo repositorio. Con los siguientes comandos:\ngit clone git@github.com:arturo-source/poker-odds.git poker-odds-wasm cd poker-odds-wasm/ git remote -v # show old repositories git remote set-url origin git@github.com:arturo-source/poker-odds-wasm.git git push -u origin main Modificar el programa para que funcione con WASM La estrategia que voy a seguir es, que el propio programa de Go devuelva el HTML. Otra opción sería ejecutar la lógica en Go, devolver el resultado a JavaScript, y manipular el DOM para insertar los datos.\nHabitualmente se recomienda esta última porque manipular el DOM con WASM es más costoso que con JavaScript, pero he encontrado incompatibilidades entre Go y WASM que no me permiten portar algunas funciones hechas en Go, para que se ejecuten en JS (por ejemplo, en Go una función puede devolver multiples valores, y cuando lo compilas a WASM no funciona).\nUna ventaja de crear el HTML desde Go es que el estado de la aplicación se mantiene en Go, en JavaScript sólo haré una función para incrustar el HTML. Manejar el estado desde Go hace más sencilla la lógica del programa.\nLas modificaciones serán las siguientes:\nEliminar el archivo console.go (contiene cómo imprimir o leer la consola). Extraer el func main en un func getResultsInHTML para poder exportarlo, y poder usarlo mediante WASM. Usar la lógica de func parseCommandLine para parsear el input del usuario con func parseUserInputs. Usar un template en HTML que emita un resultado parecido a func printResults. Una vez he programado estos cambios, llega la hora de compilar, vuelvo a ejecutar tinygo build -o wasm.wasm -target wasm ./main.go, inserto el wasm.wasm en el HTML como he hecho con el ejemplo de multiplicar, y\u0026hellip;\nWTF!? No funciona Después de todo este tiempo adaptando el programa, obtengo el error panic: unimplemented: (reflect.Type).NumOut(). Ya sospechaba que el compilador de tinygo no sería tan completo como el de go, pero aún puedo probar con el compilador oficial.\nPara los interesados, este es el error que estoy obteniendo:\nUncaught RuntimeError: unreachable at runtime._panic (wasm.wasm:0x2b2a) at (poker-odds-wasm/*reflect.rawType).NumOut (http://localhost:8000/poker-odds-wasm/wasm.wasm) at interface:{Align:func:{}{basic:int},AssignableTo:func:{named:reflect.Type}{basic:bool},Bits:func:{}{basic:int},ChanDir:func:{}{named:reflect.ChanDir},Comparable:func:{}{basic:bool},ConvertibleTo:func:{named:reflect.Type}{basic:bool},Elem:func:{}{named:reflect.Type},Field:func:{basic:int}{named:reflect.StructField},FieldAlign:func:{}{basic:int},FieldByIndex:func:{slice:basic:int}{named:reflect.StructField},FieldByName:func:{basic:string}{named:reflect.StructField,basic:bool},FieldByNameFunc:func:{func:{basic:string}{basic:bool}}{named:reflect.StructField,basic:bool},Implements:func:{named:reflect.Type}{basic:bool},In:func:{basic:int}{named:reflect.Type},IsVariadic:func:{}{basic:bool},Key:func:{}{named:reflect.Type},Kind:func:{}{named:reflect.Kind},Len:func:{}{basic:int},Method:func:{basic:int}{named:reflect.Method},MethodByName:func:{basic:string}{named:reflect.Method,basic:bool},Name:func:{}{basic:string},NumField:func:{}{basic:int},NumIn:func:{}{basic:int},NumMethod:func:{}{basic:int},NumOut:func:{}{basic:int},Out:func:{basic:int}{named:reflect.Type},PkgPath:func:{}{basic:string},Size:func:{}{basic:uintptr},String:func:{}{basic:string}}.NumOut$invoke (wasm.wasm:0x935ed) at text/template.goodFunc (wasm.wasm:0x9358e) at text/template.addValueFuncs (wasm.wasm:0x944da) at (poker-odds-wasm/*text/template.Template).Funcs (http://localhost:8000/poker-odds-wasm/wasm.wasm) at (poker-odds-wasm/*html/template.Template).Execute (http://localhost:8000/poker-odds-wasm/wasm.wasm) at getResultsInHTML (wasm.wasm:0xb6ce2) at getResultsInHTML.command_export (wasm.wasm:0xba714) at HTMLFormElement.\u0026lt;anonymous\u0026gt; (poker-odds-wasm/:119:35) Diferencias entre el compilador oficial de go y tinygo El motivo para utilizar tinygo era que este está preparado para arquitecturas con menos memoria, y produce ejecutables más pequeños, pero he descubierto que también es significativamente más lento. En concreto, en mi ordenador con arquitectura linux/amd64, he obtenido los siguientes resultados:\ntinygo go build go build -ldflags=\u0026quot;-s -w\u0026quot; version 0.30.0 1.21.6 1.21.6 time 14,536s 0,080s 0,086s size 1,8M 2,6M 2,5M size syscall/js ? 5,2M 5,1M Vuelvo a insertar el WASM en el navegador Parece que hay otro problema, Uncaught TypeError: Cannot read properties of undefined (reading 'exports'). Nada raro, solo tengo que utilizar el wasm_exec.js de mi versión de Go, que es distinto al de la versión de tinygo. Lo busco con el comando find, como antes, y lo copio de la ruta /usr/lib/go/misc/wasm/wasm_exec.js.\nUn nuevo error aparece Uncaught TypeError: wasm.exports.getResultsInHTML is not a function, debe ser porque el compilador de Go exporta las funciones de una manera distinta, no con //export getResultsInHTML.\nPara comunicar con JS necesitaré el paquete https://pkg.go.dev/syscall/js. Las funciones se registran desde el main, y el programa no puede terminar, así que se bloquea el hilo utilizando un canal \u0026lt;-make(chan bool). Además la función tiene que ser del tipo js.FuncOf -\u0026gt; func(this js.Value, args []js.Value) any.\nfunc main() { js.Global().Set(\u0026#34;getResultsInHTML\u0026#34;, js.FuncOf(func(this js.Value, args []js.Value) any { handsStr := args[0].String() boardStr := args[1].String() return getResultsInHTML(handsStr, boardStr) })) // listen infinite \u0026lt;-make(chan bool) } Ahora la función es global en JavaScript, no se llama con wasm.exports.getResultsInHTML sino directamente getResultsInHTML.\nUsar poker-odds A continuación he insertado un iframe con el código necesario, para que puedas probar el resultado final.\n","permalink":"https://arturo-source.github.io/es/posts/ejecutar-golang-en-el-navegador/","summary":"Mini tutorial para ejecutar Golang en el navegador, usando WASM.","title":"Execute Golang in Browser"},{"content":"Hugo es un constructor de sitios web estáticos. Es increíblemente rápido, tanto construyendo el sitio (\u0026gt;1ms por página), como sirviendo las páginas.\nHUGO no tiene un significado per se, es sólo el nombre de la herramienta. La clave de su rapidez reside en ser estático. Generalmente utilizarás un servidor HTTP para servir tu web (Apache HTTP server, NGINX, Caddy, etc.) para servir tu CMS en PHP (WordPress, Magento, Joomla, etc.). Incluso, puedes utilizar un servidor HTTP como proxy para tus aplicaciones web hechas con Python, NodeJS, Go, etc. Pero todas las anteriores opciones tienen en común que son dinámicas, porque tienen que ejecutar código en el servidor.\n¿Cómo funciona Hugo? ¿Qué lo hace tan rápido? Cuando construimos una web con Hugo, escribiremos el contenido con Markdown, compila todo el contenido en HTML, y lo enlaza. De esta manera, podemos subir el resultado a nuestro servidor HTTP favorito, y cuando un usuario solicita la página, el servidor no tiene que ejecutar ninguna lógica (conexión a una BBDD, procesar datos, etc.), eso lo hace tan rápido.\nPor lo tanto, Hugo es rápido en tres diferentes aspectos:\nSirve rápido el contenido a los usuarios (es simple HTML). Construye rápidamente el sitio (menos de 1ms por página). Escribes muy rápido el artículo (Markdown es increíblemente más fácil de usar que HTML). Ventajas y desventajas de Hugo Las ventajas ya las conoces: velocidad y simpleza en todos los aspectos. La desventaja es a su vez su mayor ventaja, que es estático. Esto significa que, por muy rápido que sea, no permite ejecutar código en el servidor. Pero esto lo hace perfecto para crear sitios que no necesiten lógica, como un portfolio, o un blog.\nOtras ventajas ocultas, que lo hacen tan poderoso, son:\nPuedes crear sitios web multilingüe. Contiene funciones para optimizar el SEO. Puedes extender la funcionalidad de Markdown, utilizando los templates de Go. Tienes una gran cantidad de temas gratuitos, o puedes construir el tuyo propio. Si tan fácil es, ¿cómo uso Hugo? Por supuesto, primero tienes que instalar hugo. Para crear un sitio, simplemente ejecuta:\nhugo new site yourwebname Esto crea una carpeta llamada yourwebname que contiene todo lo que necesitas. Puedes acceder a ella haciendo cd yourwebname.\nY lo siguiente es elegir un tema, para este ejemplo usaré hugo-book.\ngit init git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book echo \u0026#34;theme = \u0026#39;hugo-book\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Y ya estás listo para escribir tu primer contenido, habitualmente se utiliza la carpeta posts/, pero tú puedes crearlos donde quieras, para el ejemplo usaré blog/.\nhugo new content blog/my-first-post.md Y se habrá creado el archivo yourwebname/content/blog/my-first-post.md, el cual es una copia de archetypes/default.md con información sobre el artículo que vas a escribir.\nSi además necesitas modificar información global de la página web, lo podrás hacer en yourwebname/hugo.toml (Hugo acepta toml, yaml, y json para la configuración). Aquí podrás modificar la configuración de Hugo, y del tema que has elegido.\nY ya sólo queda poner a funcionar la web, puedes hacerlo con hugo server, o hugo server -D si quieres ver los artículos que tengas como draft: true, ¡verás qué rápido va! Pero esto sólo funcionará en tu ordenador, si quieres hacerlo público (desplegar a producción), elige tu forma favorita entre todas estas.\nPara más información, consulta la página oficial de Hugo.\n","permalink":"https://arturo-source.github.io/es/posts/hugo-el-cms-hecho-con-golang/","summary":"Echa un vistazo a este CMS creado con Go, el más rápido del mundo.","title":"¿Qué es Hugo? El CMS más rápido"},{"content":"YAML es un formato de datos para ficheros de configuración, creado para ser legible por humanos.\nYAML (YAML Ain\u0026rsquo;t Markup Language) es un acrónimo recursivo, como muchos otros en el mundo de la informática. YAML fue diseñado pensando en que sea fácilmente legible por humanos, cansado de usar lenguajes de marcado (HTML, XML, etc.) para ficheros de configuración. Acepta todo tipo de datos: strings, enteros, decimales, booleanos, nulos, listas y objetos.\n¿Por qué aprender YAML? Realmente puedes aprender YAML en una hora, y es un formato bastante popular, por lo que es un conocimiento que merece la pena tener. Algunos ejemplos de herramientas que usan YAML son Kubernetes, Docker, o Hugo, entre otros. Incluso, si quieres utilizarlo en tu propio proyecto, todos los lenguajes conocidos tienen una implementación para poder usarlo fácilmente (puedes verlo en la página oficial).\n¿Cómo es la sintaxis de YAML? Empecemos con los datos simples: string, int, float y bool.\nfullName: Arturo Source age: 25 height: 1.81 hasHouse: true Como ves, no es necesario utilizar comillas para escribir un string. A no ser que quieras indicar explícitamente que es un string. Por ejemplo, si pusiera age: '25', entonces la edad pasaría de ser un int a un string. O también si quieres utilizar caracteres especiales (:, [, ], ?, \u0026amp;, entre otros).\nAdemás, si necesitas escribir un comentario tienes que usar el caracter #, y para valores nulos null.\nfullName: Arturo Source # real?? # age: 25 height: null También, puede que necesites un string multilinea, esto es fácil utilizando el caracter |.\nbook: title: The Great Gatsby abstract: | \u0026#34;The Great Gatsby\u0026#34; is a classic novel written by F. Scott Fitzgerald. Set in the roaring twenties, the story explores themes of wealth, love, and the American Dream through the lens of the mysterious Jay Gatsby. The narrative is narrated by Nick Carraway, a young man who becomes entangled in the lives of Gatsby and his wealthy social circle in Long Island. releaseYear: 1925 Arrays y objetos en YAML YAML trata de mantenerse lo más legible posible, por eso utiliza 2 o 4 espacios (NUNCA tabulaciones) para crear arrays u objetos. De esta forma, sabes de un vistazo a qué pertenecen.\n# my favourite fruits fruits: - apple - banana - orange person: name: Arturo age: 25 Y si quieres un array de objetos, solo pondrás un guión - en el primer atributo del objeto.\npeople: - name: Arturo age: 25 - name: John age: 22 - name: Lucy age: 28 Y los objetos permiten tantas anidaciones como necesites.\nemployee: name: Charles department: name: Marketing charge: boss ","permalink":"https://arturo-source.github.io/es/posts/que-es-yaml/","summary":"Aprende qué es cómo usar YAML en unos minutos.","title":"¿Qué es YAML?"},{"content":"Frontend y Backend son las dos caras de una moneda: el desarrollo de aplicaciones. Ya sean aplicaciones web, de escritorio, o móviles, siempre encontrarás esta distinción. Y al programador que trabaja en las dos disciplinas se le denomina Full Stack.\nEl front end es la interfaz a través de la cual el usuario usa la aplicación. Los programadores front-end se encargan de hacer que el usuario entienda cómo usar la aplicación sin saber nada sobre programación.\nEl back end es el cerebro de la aplicación. Los programadores back-end ofrecen una interfaz sencilla al programador frontend, para que no tenga que entender cómo funciona la aplicación (almacenamiento de datos, procesamiento de datos, autorización, etc.).\n¿Cómo saber cuál elegir? Lo cierto es que, si estás empezando, debes probar ambos campos, porque no vas a descubrir cuál te gusta más sin hacerlo. Las tecnologías que se crean, tanto para backend como para frontend, intentan resolver varias tareas que a veces no sabrás si son del backend o del frontend. Por lo tanto, merece la pena empezar sabiendo los dos, porque, aunque te especialices en una, tener un poco de conocimiento del otro campo te permitirá trabajar mejor. Incluso poder trabajar de programador full-stack si ambos campos te apasionan.\nTecnologías actuales Frontend Por el lado del frontend, lo primero que merece la pena aprender es JavaScript, porque, a pesar de existir otras tecnologías para aplicaciones móviles y de escritorio, JavaScript es el \u0026ldquo;único\u0026rdquo; lenguaje que puedes usar para programar web. Pero, además, si sabes JavaScript, hay muchas tecnologías que te permiten crear aplicaciones móviles o de escritorio, simplemente a partir de tu conocimiento de JS.\nUna vez aprendes algo de JavaScript Vanilla (JS puro), es recomendable aprender un framework para frontend, porque te facilitará mucho la vida a la hora de crear interfaces. Los más conocidos actualmente son React, Svelte, Vue y Angular.\nSi únicamente quieres especializarte en aplicaciones de escritorio, las tecnologías más usadas son .NET, Qt, GTK, Electron (para usar JS). Mientras que si únicamente vas a enfocarte en crear aplicaciones móviles, te interesará Flutter (es multiplataforma), React Native (multiplataforma, pero usando JS), o siendo más específicos, el lenguaje nativo de las aplicaciones de Android es Kotlin, y el de las de iOS es Swift.\nBackend Por el lado del backend, el abanico está más abierto. Lo normal es aprender un lenguaje de programación (puede ser Go, Python, PHP, o el propio JavaScript con NodeJS, y un largo etcétera), y el framework que le corresponda, Django para Python, Laravel para PHP, o ExpressJS para NodeJS. En el caso de Golang existen múltiples frameworks, pero su propia librería HTTP es mucho más que suficiente en muchos casos.\n","permalink":"https://arturo-source.github.io/es/posts/que-son-frontend-y-backend/","summary":"Diferencias entre frontend y backend, cómo elegir el mejor, y cómo trabajar con ellos.","title":"¿Qué son el Frontend y el Backend?"},{"content":"Este es un mini cursillo que te servirá para aprender los conceptos básicos de Go (crear un proyecto, instalar un paquete, hacer peticiones HTTP, etc.). La idea es hacer un bot de Telegram que te dice cuánto tiempo queda para que llegue el siguiente Tram a tu parada. Este es un proyecto de ejemplo, que puedes ampliar, o incluso, seguir mejorando con proyectos totalmente distintos.\nSi quieres usar el bot, puedes hacerlo con una cuenta de telegram desde aquí: https://t.me/tram_alicante_bot\nTodo el código está disponible en https://github.com/go-telegram-bot-api/telegram-bot-api\nLas herramientas que he utilizado Como ya he mencionado, el lenguaje de programación será Go. Además, el editor que vamos a usar es Visual Studio Code. Y el sistema operativo Arch Linux.\nCómo funciona la librería de Telegram Como ya hemos instalado una librería de Telegram para Go, el siguiente paso es usarla, para comunicarnos con los humanos. En este vídeo verás la estructura del código para responder mensajes en Telegram de manera automática.\nIngeniería inversa para \u0026ldquo;scrapear\u0026rdquo; datos En este vídeo verás cómo usar tu navegador para ver cómo funciona una web por dentro, en este caso la del Tram. Con esta información podrás simular que eres un navegador en tu programa en Go, y recibir la información necesaria. Como recibirás un JSON, también vas a aprender como manipular el JSON y herramientas que te van a facilitar la vida.\nScraping de HTML en Go ¡sin librerías Si te quedaste hasta el final del último vídeo, sabrás que un endpoint de la aplicación NO devuelve JSON, sino HTML. Normalmente usarías una librería de web Scraping como Colly, pero aquí aprenderás a hacerlo sin librerías.\nDesplegar el bot GRATIS Existen multitud de hostings donde podrás alojar tu aplicación de manera gratuita (siempre y cuando no sea muy muy usada). Algunos de estos sitios los podéis ver en este tweet de Midudev\nfl0․com - render․com - fly․io - koyeb․com - qoddi․com - netlify․com - vercel․com\nEn este vídeo pretendo usar fl0.com para que veas un ejemplo de lo sencillo que es hacer accesible tu bot, para que tus amigos lo puedan usar.\n","permalink":"https://arturo-source.github.io/es/posts/bot-telegram-tram-alicante/","summary":"¿Cómo creé un bot de Telegram? ¿De dónde saqué la información del Tram? Explicación con vídeos.","title":"Bot de Telegram para el Tram de Alicante"},{"content":"MVC es un patrón de diseño que separa una aplicación en tres componentes clave: Modelo (datos y lógica), Vista (interfaz de usuario) y Controlador (gestión de interacciones y flujo).\nMVC (Modelo-vista-controlador o model-view-controller), se utiliza en el desarrollo de software, especialmente en el desarrollo de aplicaciones web. Este patrón nos facilita tener un código más mantenible, escalable, y entendible.\n¿Por qué elegir MVC? Podrás decir \u0026ldquo;yo llevo X tiempo programando y no he necesitado saber qué es MVC\u0026rdquo;, pero la realidad es que utilizar patrones en programación te va a ayudar muchísimo. La programación existe desde antes de que tú nacieras, y ya ha habido otras personas que se han encontrado con los mismos problemas que tú. Esta última frase la puedes extender a tu lenguaje favorito, a tu motor de videojuegos, o a cualquier ámbito de la programación.\nY, volviendo al tema del post, ¿por qué MVC? Lo cierto es que existen nuevas arquitecturas de diseño de aplicaciones, más nuevas y quizá mejores, pero muchas de ellas se basan en MVC, por lo que aprender MVC te va a servir como una buena base para aprender el resto.\nLa intención de MVC es separar el código en los tres componentes ya mencionados (Modelo, Vista y Controlador), hasta tal punto que tres personas diferentes podrían trabajar en los tres campos distintos, sin necesidad de saber cómo está programado el otro campo. Lo único que tienen que conocer el uno del otro es cómo se comunican entre sí (al final habrá un ejemplo práctico, para que quede 100% claro).\nDe hecho, tal es la separación entre los tres componentes de MVC, que se podría cambiar uno de ellos, y la aplicación debería seguir funcionando. El mejor ejemplo es cuando tenemos un Modelo que se comunica con una base de datos MySQL, y cambiamos el Modelo completamente para que utilice PostgreSQL. La Vista y el Controlador pueden seguir siendo las mismas que antes.\n¿Cómo se estructura MVC? Como ya conoces las tres partes, y por qué es importante separarlas, lo siguiente es saber qué hace exactamente cada componente.\nVista: Se trata de lo que verá el usuario de la aplicación. Puede ser HTML simple, una aplicación de React, o incluso una aplicación de móvil. Controlador: Actúa como intermediario entre la Vista y en Modelo. Procesa las solicitudes del usuario, y decide qué datos se muestran en la vista. Modelo: Es el encargado de tratar los datos. Cuando almacenas, actualizas, borras, o recuperas los datos, el Controlador no tiene que saber cómo se hace. Ejemplo práctico El árbol de archivos que voy a usar tiene la siguiente forma:\nview/ view/books.html model/ model/book.go controller/ controller/book.go main.go Usaré una API REST con Go como ejemplo, verás qué sencillo es de entender así. Tendremos un archivo HTML simple, que va a tener la sintaxis de un template de Go.\nLa Vista es este HTML que usando range recorrerá todos los libros. Archivo ./view/books.html\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Lista de Libros\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Lista de Libros\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {{range .}} \u0026lt;li\u0026gt;{{.Title}} - {{.Author}}\u0026lt;/li\u0026gt; {{end}} \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; El Controlador, implemento solamente la lógica de obtener libros y añadir un libro, por simplicidad. Archivo ./controller/book.go\npackage controller func bookListHandler(w http.ResponseWriter, r *http.Request) { if r.Method == http.MethodPost { newBook := model.Book{ Title: r.FormValue(\u0026#34;title\u0026#34;), Author: r.FormValue(\u0026#34;author\u0026#34;), } // Connect the controller with the model model.AddBook(newBook) fmt.Fprint(w, newBook) } if r.Method == http.MethodGet { // Connect the controller with the view view, _ := template.ParseFiles(\u0026#34;./view/books.html\u0026#34;) // Connect the controller with the model books := model.GetBooks() view.Execute(w, books) } } El Modelo, reemplazo la base de datos por un array como variable global, por simplicidad. Archivo ./model/book.go\npackage model type Book struct { Title string Author string } var books = []model.Book{ {\u0026#34;Book 1\u0026#34;, \u0026#34;Author 1\u0026#34;}, {\u0026#34;Book 2\u0026#34;, \u0026#34;Author 2\u0026#34;}, {\u0026#34;Book 3\u0026#34;, \u0026#34;Author 3\u0026#34;}, } func GetBooks() []Book { // This could be a SELECT in a database // But return global books variable (used as database in this example) return books } func AddBook(book Book) { // This could be an INSERT in a database // But append the book at global books variable (used as database in this example) books = append(books, book) } Y, por último, la función principal para levantar el servidor HTTP. Archivo ./main.go\npackage main func main() { http.HandleFunc(\u0026#34;/books\u0026#34;, controller.bookListHandler) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } ","permalink":"https://arturo-source.github.io/es/posts/que-es-mvc/","summary":"Un poco de MVC para convertirte en un pro de la programación.","title":"¿Qué es MVC?"},{"content":"Las API permiten que programas informáticos se comuniquen entre sí.\nNormalmente usarás una API (Application Programming Interface) sobre el protocolo HTTP, que es el más común en las comunicaciones en internet. Sin embargo, una API es cualquier conjunto de reglas que siguen dos sistemas informáticos para comunicarse. Normalmente no eres consciente de que estás consumiendo una API porque utilizas una librería que te lo facilita.\n¿Qué tipos de API existen? Si tienes alguna experiencia programando, seguro que estos ejemplos te van a sonar:\nSistemas operativos: Windows, macOS y Linux proporcionan API a los desarrolladores de software para interactuar con las funciones y características del sistema operativo. Bases de datos: Permiten que tu software se conecte y realice consultas a los motores de bases de datos (MySQL, PosgreSQL, etc.). Hardware: Los dispositivos como impresoras, cámaras y sensores, a menudo vienen con sus propias API que permiten a los desarrolladores interactuar con ellos desde sus aplicaciones. Servicios en la nube: Ya sea una API de estadísticas de Pokemon, como tu sistema de almacenamiento en la nube, como un VPS que contrates, ofrecen API que te permiten automatizar acciones mediante peticiones (probablemente en HTTP, aunque existen más protocolos de comunicación). Ejemplos con Go No me voy a extender con varios lenguajes, como en otros artículos, porque vas a entender qué es cada una de las API anteriormente mencionadas fácilmente.\nPara crear o leer archivos, necesitarás interactuar con el sistema operativo.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { file, err := os.Create(\u0026#34;file.txt\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error creating file:\u0026#34;, err) return } defer file.Close() data := []byte(\u0026#34;Hello world!\u0026#34;) _, err = file.Write(data) if err != nil { fmt.Println(\u0026#34;Error writing file:\u0026#34;, err) return } } Cómo consumir una API HTTP con la librería estándar de Go.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;io/ioutil\u0026#34; ) func main() { url := \u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34; response, err := http.Get(url) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer response.Body.Close() body, err := ioutil.ReadAll(response.Body) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } fmt.Println(string(body)) } Para interactuar con una base de datos, en este caso sqlite.\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; _ \u0026#34;github.com/mattn/go-sqlite3\u0026#34; ) func main() { db, err := sql.Open(\u0026#34;sqlite3\u0026#34;, \u0026#34;test.db\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer db.Close() rows, err := db.Query(\u0026#34;SELECT name FROM users WHERE id = ?\u0026#34;, 1) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } defer rows.Close() var name string if rows.Next() { err := rows.Scan(\u0026amp;name) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } fmt.Println(\u0026#34;Name:\u0026#34;, name) } else { fmt.Println(\u0026#34;User not found\u0026#34;) } } Para interactuar con Hardware, puedes utilizar la famosa librería gocv.\n","permalink":"https://arturo-source.github.io/es/posts/que-es-una-api/","summary":"\u003cp\u003eLas API permiten que programas informáticos se comuniquen entre sí.\u003c/p\u003e\n\u003cp\u003eNormalmente usarás una API (Application Programming Interface) sobre el protocolo HTTP, que es el más común en las comunicaciones en internet. Sin embargo, una API es cualquier conjunto de reglas que siguen dos sistemas informáticos para comunicarse. Normalmente no eres consciente de que estás consumiendo una API porque utilizas una librería que te lo facilita.\u003c/p\u003e\n\u003ch2 id=\"qué-tipos-de-api-existen\"\u003e¿Qué tipos de API existen?\u003c/h2\u003e\n\u003cp\u003eSi tienes alguna experiencia programando, seguro que estos ejemplos te van a sonar:\u003c/p\u003e","title":"¿Qué es una API?"},{"content":"Una variable de entorno es un dato global, almacenado en el sistema operativo, que puede ser leido fácilmente por cualquier programa.\nHabitualmente lo utilizarás para gestionar datos que cambian entre un entorno de \u0026lsquo;producción\u0026rsquo;, y un entorno de \u0026lsquo;desarrollo\u0026rsquo;. De tal modo que las variables de entorno te permiten cambiar el comportamiento de tu programa, sin necesidad de cambiar el código.\n¿Cómo se guardan en las Variables de Entorno? Realmente puedes guardar cualquier tipo de dato primitivo (los aprendiste en el post de las variables), de una manera tan sencilla como esta:\nMY_NAME=Arturo YT_CHANNEL_URL=https://www.youtube.com/@arturosource MAX_TIMEOUT=10 Generalmente, la variable de entorno la escribirás en mayúscula, seguida del nombre de la variable un =, y por último, el valor sin espacios al principio ni al final.\n¿Qué datos es más común almacenar? Almacena cualquier dato que creas pertinente, con la experiencia sabrás cuáles hay que almacenar y cuáles no. Pero aquí tienes algunos ejemplos para empezar.\nRutas del sistema: Indica a un programa dónde buscar archivos ejecutables, bibliotecas, recursos, o archivos de configuración. Datos de autenticación: Almacena credenciales de autenticación, como claves de API o contraseñas. Configuración: Personaliza campos como el puerto de escucha, el nombre de dominio, el nivel de depuración, el idioma o región, etc. ¿Dónde almacenar las variables de entorno? Existen varias maneras de hacer saber a un programa las variables que tienen que usar. Me centraré en el sistema operativo Linux, que es donde comúnmente programarás, y desplegarás tus programas.\nA nivel de sistema operativo: es tan sencillo como editar el archivo /etc/environment, y sigue el estilo que aparece anteriormente. Utiliza el editor de texto nano, por ejemplo, y necesitarás permisos para editar el archivo. Así que el comando será sudo nano /etc/environment. A nivel de programa: si ejecutas una aplicación desde la terminal, puedes asignar tantas variables como quieras antes de la ejecución. Usando las del ejemplo anterior, podrías escribir un comando así MY_NAME=Arturo MAX_TIMEOUT=10 bash ./coolbashscript. En un archivo que leerá tu aplicación: en los lenguajes modernos tendrás alguna librería con la que puedes leer un fichero como si tuviera variables de entorno, comúnmente se llamará .env. Tendrás que buscar la librería correspondiente de tu lenguaje de programación, y listo. ¿Cómo usar variables de entorno en tu programa? Para finalizar, algunos ejemplos de cómo se leen variables de entorno en los lenguajes más comunes.\nCon Golang, importando os.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { ytChannel := os.Getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;) fmt.Printf(\u0026#34;Valor de YT_CHANNEL_URL: %s\\n\u0026#34;, ytChannel) } Con JavaScript, usando la variable global process.\nconst ytChannel = process.env.YT_CHANNEL_URL; console.log(`Valor de YT_CHANNEL_URL: ${ytChannel}`); Con PHP, la función global getenv.\n$ytChannel = getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;); echo \u0026#34;Valor de YT_CHANNEL_URL: \u0026#34; . $ytChannel; Con Python, impostando os también.\nimport os ytChannel = os.getenv(\u0026#34;YT_CHANNEL_URL\u0026#34;) print(f\u0026#34;Valor de YT_CHANNEL_URL: {ytChannel}\u0026#34;) ","permalink":"https://arturo-source.github.io/es/posts/que-es-una-variable-de-entorno/","summary":"¿Para qué sirve una variable de entorno? ¿Cómo se usa? Todo en un minuto.","title":"¿Qué es una Variable de Entorno?"},{"content":"Una variable es una caja. En esta caja guardarás datos, accederás a ellos, y los manipularás rápidamente.\nImagina que dentro de tu caja quieres guardar tu edad.\nage = 25 Entonces en alguna parte de la RAM de tu ordenador, habrá algo parecido a esto:\n---- |25| ---- Y cuando quieras ir a esa parte desconocida de tu RAM, bastará con que en tu código pongás age, y mágicamente podrás ver el valor 25.\nTipos de datos en programación Un dato puede ser cualquier cosa, pero los datos más sencillos son int, float, bool y string. A estos tipos de datos se les llama tipos de datos primitivos, cada lenguaje de programación los llama de una manera, pero representan lo mismo.\nint: número entero -\u0026gt; 10.2, 66.4, etc. float: número decimal -\u0026gt; 10.2, 66.4, etc. bool: valor booleano, es decir, verdadero o falso -\u0026gt; TRUE o FALSE string: cadena de texto -\u0026gt; \u0026ldquo;hello world\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, etc. Algunos lenguajes te permitirán acceder a algunos más específicos como byte, char, o punteros como int*, pero con los anteriores te podrás manejar con los lenguajes más nuevos.\nBuenas prácticas Cuando empiezas a programar es muy tentador empezar a poner nombres aleatorios a las variables, porque tus programas son pequeños y no los tiene que leer nadie. NO hagas eso nunca, aunque a veces sea difícil ponerle un nombre descriptivo a una variable, siempre merece la pena.\nHabitualmente tu código tendrá que ser leído por otras personas, o peor aún, tu yo del futuro tendrá que leer el código de tu yo del presente, y te aseguro que no quieres ser tu yo del futuro si no nombras bien tus variables.\nVeamos un pequeño ejemplo.\nx = 10 y = x*x ¿Qué se supone que es y? Es un código tan poco descriptivo que la única forma de que sepas lo que sucede es que tengas frescos tus conocimientos de geometría. La forma correcta de nombrar las variables sería así.\nsideSize = 10 squareArea = sideSize*sideSize Ahora entiendes lo que queríamos calcular sin ningún problema, sin que tenga que explicar el código, sólo por el nombre de las variables.\nEjemplos con los distintos lenguajes de programación Un concepto algo avanzado, pero que merece la pena mencionar ahora, es el de los lenguajes de programación de tipo estático y de tipo dinámico. Con los siguientes ejemplos lo entenderás perfectamente.\nEn el lenguaje de programación C++ tendremos que decir de qué tipo es la variable. Es de tipado estático.\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; int main() { int age = 25; std::string name = \u0026#34;Charles\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;Hello, my name is \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; and I\u0026#39;m \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; \u0026#34; years old.\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } Mientras que el lenguaje de programación Go también es estático, pero si usamos := el compilador deduce el tipo de variable por ti.\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { age := 25 // int name := \u0026#34;Charles\u0026#34; // string fmt.Println(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;) } Con JavaScript puedes olvidarte de los tipos, es un lenguaje de programación dinámico.\nconst age = 25; const name = \u0026#34;Charles\u0026#34;; console.log(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;); Esto es tanto una ventaja, como un inconveniente. Puede que el código parezca más sencillo, pero a la larga será más difícil de mantener.\nY, por último, el famoso lenguaje de programación Python, que también es dinámico, aunque sutilmente diferente a JavaScript, pero esto es más avanzado.\nage = 25 name = \u0026#34;Charles\u0026#34; print(\u0026#34;Hello, my name is \u0026#34; + name + \u0026#34; and I\u0026#39;m \u0026#34; + age + \u0026#34; years old.\u0026#34;) Disclaimer: Con nuevas versiones de C++ puedes deducir tipos como en Go, en JavaScript no es necesario escribir const, y los mensajes de \u0026ldquo;Hello, my name is \u0026ldquo;\u0026hellip; se pueden formatear de distintas maneras, más elegantes o sencillas. Todo lo anterior son ejemplos simples, para que se entienda fácilmente el mensaje.\n","permalink":"https://arturo-source.github.io/es/posts/que-es-una-variable/","summary":"El primer paso para aprender programación. ¿Cómo funcionan los programas por dentro?","title":"¿Qué es una variable?"},{"content":"Hacer un commit en git significa guardar los cambios de tus archivos en tu repositorio local. Siempre querrás usar un mensaje descriptivo para registrar la evolución de tu proyecto.\nHacer un commit en git es uno de los conceptos fundamentales en el control de versiones. Cuando haces un commit, estás creando un punto de control en la historia de tu proyecto. Cada commit contiene una instantánea de los archivos en ese momento, junto con un mensaje descriptivo que explica los cambios realizados.\nPasos para guardar tus archivos Existe un montón de plataformas que integran git (GitHub, GitLab, Bitbucket, Gitea). Sin embargo, primero voy a darte los conocimientos básicos para trabajar desde tu PC.\nEn este caso hablaré de un proyecto de programación. Normalmente, tendrás varios archivos y carpetas. Cuando quieres guardar tu progreso, puede que hayas cambiado varios archivos, pero sólo quieras registrar los cambios de unos pocos. Con . registrarás los cambios de la carpeta en la que estás trabajando.\ngit add . Y si solo quieres registrar el progreso de tres ficheros, lo harás de la siguiente manera.\ngit add file1 file2 folder1/file1 El segundo paso, una vez registrados los cambios que quieres guardar, es confirmar los cambios, lo que llamaré \u0026lsquo;hacer un commit\u0026rsquo;. Es muy importante colocar un mensaje que represente los cambios desde el último commit. Esto lo podemos hacer de dos formas.\nLa primera, para mí, la más sencilla. Escribir el comando y te aparecerá un resumen de los cambios en tu ventana. Ya podrás escribir el comentario.\ngit commit La segunda, más rápida. Añadir -m al comando para escribir el mensaje directamente.\ngit commit -m \u0026#34;Info about changes\u0026#34; Esto es todo lo que necesitas para mantener un control de los cambios en tu aplicación. Para ver todos los puntos de control, basta con escribir git log.\nGuardar tu código en la nube Existe un último comando fundamental que quieres conocer. Te servirá para guardar tu código, y todos tus cambios en la nube. Además, cuando seas profesional, te permitirá trabajar con tus compañeros, sobre el mismo código.\ngit push Push significa subir tus cambios. Lo harás después de haber confirmado tus cambios con tu \u0026lsquo;commit\u0026rsquo;, después de varios \u0026lsquo;commit\u0026rsquo;. Pero, ¿y si tus compañeros se quieren descargar tus cambios?\ngit pull Pull significa descargar los cambios. Querrás hacerlo siempre que quieras tener tus cambios sincronizados con el resto del equipo.\n","permalink":"https://arturo-source.github.io/es/posts/que-es-git-commit/","summary":"Conceptos básicos de git en un minuto.","title":"¿Qué es git commit?"},{"content":"SQL es un lenguaje utilizado para consultar y gestionar bases de datos relacionales.\nSQL (Structured Query Language) fue desarrollado en la década de 1970 y se ha convertido en un estándar en la gestión y manipulación de bases de datos relacionales. Utilizarás SQL siempre con un motor de base de datos, que es una pieza de Software que contiene la lógica para manipular los datos. Es muy común utilizar un motor de base de datos en programación, porque nos permite no tener que programar la lógica de datos desde cero.\nSintaxis de SQL Cada motor de base de datos (MySQL, MariaDB, PostgreSQL, SQLite, etc.) tiene añadidos para hacer más fácil el tratamiento de los datos, pero todos tienen en común la sintaxis básica de SQL. Las operaciones comunes que querrás hacer en una base de datos son:\nCrear una tabla Lo primero que querrás hacer es crear una tabla para poder insertar datos, borrarlos, etc.\nCREATE TABLE Clients ( ID INT PRIMARY KEY, FullName VARCHAR(50), Email VARCHAR(100) ); Esta tabla va a tener:\nID (identificador irrepetible, por eso es PRIMARY KEY, y es un número entero, por eso INT). FullName (cadena de texto, por eso VARCHAR, de longitud máxima 50 caracteres). Email (cadena de texto, esta vez de longitud 100). Borrar una tabla Esta tabla también se puede borrar.\nDROP TABLE Clients; Consultar una tabla SELECT * FROM Clients; También puedes elegir qué campos quieres obtener, * significa todos.\nSELECT ID, FullName FROM Clients; Insertar datos en una tabla INSERT INTO Clients (ID, FullName, Email) VALUES (1, \u0026#39;Barnes Smith\u0026#39;, \u0026#39;bsmith@mail.com\u0026#39;); Actualizar datos de una tabla Es muy importante la cláusula WHERE en una actualización. Si no usas WHERE, todas las filas de la tabla se actualizarán.\nUPDATE Clients SET Email = \u0026#39;newbsmith@mail.com\u0026#39; WHERE ID = 1; Borrar una fila de una tabla Cuando borramos filas en una tabla, también será muy importante usar la cláusula WHERE. Si no usas WHERE, borrarás todos los datos de la tabla.\nDELETE FROM Clients WHERE ID = 1; Consultas avanzadas de SQL (SUM, COUNT, AVG) El siguiente paso es hacer operaciones con los datos. Lo que quieres no es únicamente consultar datos, los motores de bases de datos son mucho más potentes que eso. Primero crearás una tabla e insertarás datos como ya sabes hacer:\nCREATE TABLE Sales ( ID INT PRIMARY KEY, Product VARCHAR(255), Quantity INT, Price DECIMAL(10, 2) ); INSERT INTO Sales (ID, Product, Quantity, Price) VALUES (1, \u0026#39;T-shirt\u0026#39;, 100, 15.99), (2, \u0026#39;Jeans\u0026#39;, 50, 29.99), (3, \u0026#39;Shoes\u0026#39;, 30, 49.99), (4, \u0026#39;Hat\u0026#39;, 75, 9.99), (5, \u0026#39;Socks\u0026#39;, 200, 4.99); Con estos datos, puedes calcular, por ejemplo, cuánto has ganado. Puedes usar AS para ponerle un alias a la operación de suma.\nSELECT SUM(Price * Quantity) AS TotalEarn FROM Sales; También puedes contar cuántos productos has vendido.\nSELECT COUNT(*) AS TotalSales FROM Sales; Y si utilizas la cláusula WHERE, puedes ver cuántos \u0026lsquo;Jeans\u0026rsquo; has vendido. Con los datos proporcionados anteriormente, el resultado debería de ser 1.\nSELECT COUNT(*) AS JeansSales FROM Sales WHERE Product = \u0026#39;Jeans\u0026#39;; Y por último, puedes hacer la media del precio de los productos vendidos.\nSELECT AVG(Price) AS AveragePrice FROM Sales; Existen muchas otras operaciones sencillas (MIN, MAX, GROUP BY, HAVING, etc.) que te facilitarán la vida con SQL. Pero al principio te he hablado de bases de datos relacionales, ¿qué significa relacionales?\n¿Base de datos relacional? SQL es relacional, porque todas las tablas de una base de datos pueden tener relaciones entre sí. Por ejemplo, has creado una tabla de Sales antes, pero lo habitual sería tener otra tabla de Products, porque si haces una venta, tiene que ser sobre un producto. Esto es lo que se conoce como una relación entre tablas.\nUna vez sabes de la existencia de relaciones, tendrás que plantearte cómo hacer consultas JOIN, LEFT JOIN, etc. Pero esto te dejo que continues investigando.\n","permalink":"https://arturo-source.github.io/es/posts/que-es-sql/","summary":"Aprende SQL en unos pocos minutos.","title":"¿Qué es SQL?"},{"content":"JSON es un estándar de intercambio de datos ligero y legible por humanos.\nJSON (JavaScript Object Notation) utiliza una estructura de pares clave-valor para representar información de manera independiente del lenguaje de programación. Esto permite almacenar, leer, enviar y recibir datos, independientemente del software, protocolo, o lenguaje de programación que uses.\n¿Por qué elegir JSON? Por supuesto, existen otros estándares que permiten hacer una, algunas, todas o más funciones que JSON (entre ellos XML, YAML, protobuf, etc.), pero los motivos para elegir JSON son:\nLegibilidad: JSON utiliza una sintaxis legible por humanos. Es fácil de leer y escribir Fácil de usar: Todos los lenguajes de programación disponen de una librería para parsear JSON. Adopción: La mayoría de APIs que vayas a consumir, responderán en JSON. Sintaxis de JSON Habitualmente, te encontrarás con JSON con el siguiente formato, representando, por ejemplo, una persona:\n{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] } Pero también puedes encontrarte a un conjunto de personas (eliminaré campos del JSON para simplificar):\n[ { \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;age\u0026#34;: 30 }, { \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 27 }, { \u0026#34;name\u0026#34;: \u0026#34;Sophia\u0026#34;, \u0026#34;age\u0026#34;: 32 } ] Un error común: recuerda que el último campo del objeto { ... } y del array [ ... ], no llevan coma.\nEjemplos con código A continuación, algunos ejemplos de cómo leer un JSON con los lenguajes más comunes. Los datos se podrían obtener de una llamada a una API, o leyendo un fichero .json. Dependiendo del lenguaje, y la situación, haremos un manejo de errores distinto, pero estos son ejemplos muy sencillos.\nGolang package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { jsonData := `{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }` type Person struct { Name string `json:\u0026#34;name\u0026#34;` Surname string `json:\u0026#34;surname\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` Height float64 `json:\u0026#34;height\u0026#34;` LovesPasta bool `json:\u0026#34;lovesPasta\u0026#34;` Interests []string `json:\u0026#34;interests\u0026#34;` } var person Person if err := json.Unmarshal([]byte(jsonData), \u0026amp;person); err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;Name: %s\\nSurname: %s\\nAge: %d\\nHeight: %.2f\\nLoves Pasta: %v\\nInterests: %v\\n\u0026#34;, person.Name, person.Surname, person.Age, person.Height, person.LovesPasta, person.Interests) } JavaScript var jsonData = `{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }`; var person = JSON.parse(jsonData); console.log(\u0026#34;Name: \u0026#34; + person.name); console.log(\u0026#34;Surname: \u0026#34; + person.surname); console.log(\u0026#34;Age: \u0026#34; + person.age); console.log(\u0026#34;Height: \u0026#34; + person.height); console.log(\u0026#34;Loves Pasta: \u0026#34; + (person.lovesPasta ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;)); console.log(\u0026#34;Interests: \u0026#34; + person.interests.join(\u0026#34;, \u0026#34;)); PHP \u0026lt;?php $jsonData = \u0026#39;{ \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] }\u0026#39;; $person = json_decode($jsonData, true); if ($person === null) { echo \u0026#34;Error al decodificar el JSON\\n\u0026#34;; } else { echo \u0026#34;Name: \u0026#34; . $person[\u0026#34;name\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Surname: \u0026#34; . $person[\u0026#34;surname\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Age: \u0026#34; . $person[\u0026#34;age\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Height: \u0026#34; . $person[\u0026#34;height\u0026#34;] . \u0026#34;\\n\u0026#34;; echo \u0026#34;Loves Pasta: \u0026#34; . ($person[\u0026#34;lovesPasta\u0026#34;] ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;) . \u0026#34;\\n\u0026#34;; echo \u0026#34;Interests: \u0026#34; . implode(\u0026#34;, \u0026#34;, $person[\u0026#34;interests\u0026#34;]) . \u0026#34;\\n\u0026#34;; } ?\u0026gt; Python import json jsonData = \u0026#39;\u0026#39;\u0026#39; { \u0026#34;name\u0026#34;: \u0026#34;Alex\u0026#34;, \u0026#34;surname\u0026#34;: \u0026#34;Walker\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;height\u0026#34;: 1.8, \u0026#34;lovesPasta\u0026#34;: true, \u0026#34;interests\u0026#34;: [\u0026#34;sport\u0026#34;, \u0026#34;cook\u0026#34;, \u0026#34;films\u0026#34;] } \u0026#39;\u0026#39;\u0026#39; person = json.loads(jsonData) print(\u0026#34;Name:\u0026#34;, person[\u0026#34;name\u0026#34;]) print(\u0026#34;Surname:\u0026#34;, person[\u0026#34;surname\u0026#34;]) print(\u0026#34;Age:\u0026#34;, person[\u0026#34;age\u0026#34;]) print(\u0026#34;Height:\u0026#34;, person[\u0026#34;height\u0026#34;]) print(\u0026#34;Loves Pasta:\u0026#34;, \u0026#34;Yes\u0026#34; if person[\u0026#34;lovesPasta\u0026#34;] else \u0026#34;No\u0026#34;) print(\u0026#34;Interests:\u0026#34;, \u0026#34;, \u0026#34;.join(person[\u0026#34;interests\u0026#34;])) ","permalink":"https://arturo-source.github.io/es/posts/que-es-json/","summary":"Aprende qué es y para qué sirve JSON en un minuto.","title":"¿Qué es JSON?"},{"content":"Esta semana comencé un proyecto para refrescar mis conocimientos sobre React. Pero como se trataba de un side-project, quería tardar lo mínimo posible.\nJugar ya ¿Cómo hice el buscaminas? El código puedes encontrarlo en mi github, pero lo interesante es que no tardé nada en montar el proyecto. Para crearlo usé vite, simplemente escribiendo en la línea de comandos npm create vite@latest.\nElegí React como framework, y entre las opciones para compilar el proyecto y desarrollarlo utilicé SWC, puesto que es un bundler más rápido y me permite agilizar el trabajo.\nEn lugar de TypeScript utilicé JavaScript, por lo que mencioné anteriormente, quiero que sea un proyecto rápido, y que no se alargue demasiado tiempo.\nComo Vite ya te construye todo lo necesario en el package.json, cuando empiezo a desarrollar solo ejecuto npm run dev. Mientras que construir el proyecto es npm run build.\n¿Cómo desplegar el proyecto? Para construir el proyecto ya sabes que simplemente ejecutando npm run build se te creará una carpeta llamada ./dist. Esta carpeta contiene todo lo necesario para que puedas ejecutar la aplicación. Pero mi objetivo era tener el juego disponible en mi web, y no funcionaba sólo con arrastrar la carpeta dentro de mi web.\nSi te fijas en el index.html que está dentro de la carpeta ./dist, aparecen las siguientes líneas que se encargan de enlazar el CSS y JS.\n\u0026lt;script type=\u0026#34;module\u0026#34; crossorigin=\u0026#34;\u0026#34; src=\u0026#34;/assets/index-3d1a63c8.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/assets/index-bab0855b.css\u0026#34; /\u0026gt; El problema era que las rutas eran absolutas porque empezaban por un slash /, pero si le quitas el slash del principio, el navegador entiende que tiene que utilizar una ruta absoluta, entonces dará igual si tu juego está en una subcarpeta, siempre y cuando los assets (CSS y JS) estén en la misma carpeta.\nPrueba el juego tú mismo ","permalink":"https://arturo-source.github.io/es/posts/buscaminas-hecho-con-react/","summary":"El conocido juego buscaminas, creado con React, pruébalo ya y mira cómo ha sido hecho.","title":"Buscaminas hecho con React"},{"content":"¿Cansado de tener que buscar la documentación de Docker cada vez que quieres utilizarlo? ¡Yo también! Así que en este post vamos a repasar los conocimientos básicos, y vas a entenderlo TODO aunque sea la primera vez que usas Docker.\nPor si acaso no conoces Docker: es una aplicación para desplegar OTRAS APLICACIONES, y olvidarte de tener que configurarlas. Además funciona en todos los sistemas operativos.\nCómo correr un contenedor de Docker Vamos a empezar por algo sencillito: vamos a montar una base de datos MySQL.\nLo primero que debes de saber es que todas las aplicaciones más conocidas tienen su versión de Docker, puedes buscarlas en el hub de Docker. Un ejemplo de ellas es esta, que se puede verificar que es oficial porque pone “Docker Official Image“. https://hub.docker.com/_/mysql\nY simplemente pones lo siguiente en la terminal docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql\nPero esto es una línea súper larga, ¿Qué significa cada cosa?\nrun: descarga la imagen de MySQL (si no la tienes ya), y ejecuta la imagen en un contenedor (es decir, la corre). \u0026ndash;name: sirve para ponerle un nombre al contenedor, luego veremos para qué. -e: sirve para asignar variables de entorno, así no tendremos que tocar ficheros de configuración. En este caso le decimos la contraseña de ROOT de la base de datos. -d: sirve para dejar el contenedor en modo detached. Es decir, el contenedor no se apaga hasta que no termina la ejecución (en el caso de la BBDD, hasta que no la paremos). Cómo puntilla final, cabe aclarar que docker run es equivalente a hacer docker pull (descarga) y docker exec (corre).\nComandos útiles de Docker Ahora que ya te he soltado el tostón, vamos con más comandos útiles. Lo siguiente que tienes que saber es cómo ver los contenedores que están activos. Con docker ps los verás, y para ver también los que no están activos docker ps -a de all.\nLo que vemos a la izquierda de cada línea es el ID del contenedor, lo podemos utilizar para referirnos a él. Por otro lado, a la derecha del todo tienes el NAME, que sirve también para referirte al contenedor, y se asigna de manera aleatoria a no ser que utilices \u0026ndash;name que has visto antes.\nPor lo tanto, es tan sencillo como, si quieres parar un contenedor escribas docker stop [ID], para reiniciar un contenedor docker restart [ID], y si quieres borrarlo de tu ordenador docker rm [ID]. Sustituyendo [ID] por el id del contenedor o el nombre que le hayas asignado.\nCómo entrar dentro de un contenedor Puede que quieras entrar en un contenedor de Docker, hay muchos motivos para hacerlo (por ejemplo, crear una imagen personalizada). Y como la mayoría de imágenes de Docker utilizan Linux, lo que puedes hacer es abrir una terminal dentro del contenedor.\nPara ello vas a escribir en la terminal docker exec -it [ID] bash. Por supuesto, cambiando el [ID] por el id del contenedor. ¿Y qué significa este comando?\nexec: ejecuta un comando dentro del contenedor. -it: te permite usar el contenedor de forma interactiva. bash: es el comando que ejecutas (abre una sesión de la terminal). De esta forma puedes ejecutar los mismos comandos que ejecutarías en tu terminal, pero dentro del contenedor que has creado.\nPuertos y Volúmenes Es esencial que conozcas el uso de los puertos y los volúmenes con Docker, porque con la mayoría de imágenes querrás utilizarlos.\nPara asignar un puerto, vas a utilizar la opción -p 8080:80, de forma que el puerto que quieres exponer en tu ordenador será el primero antes de los dos puntos, y el puerto de escucha del contenedor será el segundo. De esta manera podremos poner un servidor HTTP, que dentro estará en el puerto 80, escuchando en el puerto 8080 en tu servidor. Sino, si el servidor HTTP no se pudiera comunicar con el exterior, no serviría para prácticamente nada.\nY por otro lado tenemos los volúmenes, puedes tener muchos motivos para crear un volumen pero el más importante yo considero que es la persistencia. Si estás corriendo un servidor de base de datos, como en el ejemplo con MySQL, y no quieres perder todo el contenido de la base de datos al borrar el contenedor, tienes que decirle a Docker dónde quieres que escriba esa información en tu servidor. La opción que usaremos es -v /ruta/tu/ordenador:/ruta/en/contenedor, de esta forma se almacenará la información en la ruta que especifiques. Realmente los volúmenes se suelen utilizar de otra manera, pero esta es la forma más sencilla.\nDiferencia entre imagen y contenedor Esto es realmente sencillo, pero cuando lo ves por primera vez puede llegar a confundir. Una imagen es la base con la que vas a crear tu contenedor. De tal manera que si quieres montar un servidor de base de datos MySQL, buscarás una imagen en el Hub de Docker, y generarás un contenedor con el servidor de base de datos.\nCómo lo uso yo normalmente El comando que más suelo utilizar para el desarrollo de mis aplicaciones es docker run --rm -p 8080:80 -e VARIABLE=valor -d imagen:tag. Poner --rm en el comando no es algo que se haga en entornos de producción, pero para el desarrollo te va a ahorrar el estar borrando contenedores constantemente, nada más finalizar la ejecución, se borra el contenedor. Mientras que -p, -e y -d lo uso siempre porque es común tener que poner un proceso a la escucha en un puerto, y tener que asignar una contraseña. Y por último, el tag no lo he mencionado, pero si quieres que siempre se te descargue la misma versión de la imagen, es necesario que le asignes un tag, sino se te descargará el \u0026ldquo;latest\u0026rdquo;, que puede tener cambios que fastidien tu aplicación.\nPara finalizar este post, sólo quiero aclarar que, aunque este post lo he escrito con la finalidad de ayudar a la comunidad, en realidad también ha sido escrito para recordarme a mí, cada vez que tengo que volver a usar Docker, qué es lo mínimo indispensable que tengo que saber para no morir en el intento. Así que de nada por la ayuda Arturo del futuro 😜.‌\n","permalink":"https://arturo-source.github.io/es/posts/primera-vez-usando-docker/","summary":"Un rápido tutorial, útil tanto si es la primera vez, como si necesitas refrescar tus conocimientos de Docker.","title":"Todo lo que necesitas saber para empezar a usar Docker"},{"content":"Hola a todos, este no pretende ser un post tan extenso como acostumbro habitualmente, porque todo el trabajo de documentación lo hice en el propio repositorio de GitHub del proyecto. Se trata de mi solución para el Codember 2022. Son 5 problemas propuestos por Midudev, que pueden ser resueltos en cualquier lenguaje de programación. Como sabéis, yo soy un fan de Golang, así que decidí resolverlos en este lenguaje.\nEl Codember 2022 es un reto de programación que consiste en resolver 5 problemas en 5 días (no consecutivos). Y la solución la mandarás a través de la web, la cual está ambientada al estilo de una antigua terminal de ordenador. Cuanto antes resuelvas el ejercicio, más puntos obtendrás. Y no solo eso, hay unos retos ocultos para los cuales tendrás que actuar como un \u0026ldquo;hacker\u0026rdquo; para descubrirlos.\nMi solución Antes de que veais mi solución, quiero recomendaros es que los leais vosotros mismos desde la propia página web https://codember.dev/, si es que estáis buscando un reto. Sin embargo, si solo os interesa ver el enunciado del problema y la solución pertinente, aquí os dejo mi código, y la documentación, os invito a que lo visitéis https://github.com/arturo-source/codember.\nEn mi caso, el puesto obtenido dentro del ranking ha sido el 375, puesto que me enteré tarde y no pude realizar los problemas a tiempo. Sin embargo, no puedo negar que me he entretenido un rato resolviendo los problemas. Espero que os sea de utilidad mi solución.\n","permalink":"https://arturo-source.github.io/es/posts/codember-2022-resuelto/","summary":"Cómo resolví los retos del Codember 2022","title":"Codember 2022 Resuelto"},{"content":"Buenas prácticas en cualquier lenguaje Una de las cosas más importantes cuando trabajamos en equipo es seguir un mismo estilo de programación. Esto es importante porque probablemente algún compañero tendrá que ver tu código en un futuro, o tú el suyo, o lo que es peor, tú el tuyo mismo. Y querréis que ese trabajo sea lo menos tedioso posible.\nEs cierto que hay algunas buenas prácticas de programación que son comunes a todos los lenguajes, como por ejemplo hacer que una función sea autodescriptiva, en definición, que el nombre de la función explique lo que haces dentro de ella, y para esto sueles necesitar que la función sea lo menos larga posible. El siguiente ejemplo, que es el del juego de la serpiente, es un ejemplo de una función que es autodescriptiva, en lugar de escribir todo el código para dibujar la serpiente, la comida, y el puntaje, lo que hice fue crear funciones que se encargaran de hacer eso, y luego llamarlas desde la función drawGame, que lo único que hace es dibujar el estado actual del juego.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } Otra buena práctica común a todos los lenguajes es intentar evitar el código espagueti. Esto significa que si tu código tiene un if, dentro de otro if, etc. y queda mucho espacio a la izquierda, probablemente tengas que refactorizarlo (esto aplica también a los bucles).\nfunc spaghettiCode(u User) { if u.Name != \u0026#34;\u0026#34; { if u.Address != \u0026#34;\u0026#34; { if u.Email != \u0026#34;\u0026#34; { // Do something } else { // Do something with wrong email } } else { // Do something with wrong address } } else { // Do something with wrong name } } func noSpaghettiCode(u User) { if u.Name == \u0026#34;\u0026#34; { // Do something with wrong name return } if u.Address == \u0026#34;\u0026#34; { // Do something with wrong address return } if u.Email == \u0026#34;\u0026#34; { // Do something with wrong email return } // Do something } El nombrado de variables/funciones/archivos Luego, hay otras prácticas que no son ni buenas ni malas, y que tampoco dependen del lenguaje de programación, pero sí conviene llegar a un acuerdo con el equipo antes de comenzar un proyecto. Un ejemplo de estas es la forma de llamar a las variables, funciones, y archivos, existen varias muy conocidas:\nPascal case: DrawGame Camel case: drawGame Snake case: draw_game Kebab case: draw-game Como podrás apreciar el pascal case y el camel case son muy parecidas, solo cambia si la primera letra será mayúscula o no. Un ejemplo de caso de uso sería: usar pascal case para los nombres de las clases, y camel case para los nombres de las funciones.\nPor otro lado, hay gente que prefiere utilizar snake case, lo más habitual es en lenguajes antiguos como PHP y C, pero estoy seguro de que se utiliza en muchos equipos con lenguajes modernos.\nMientras que el kebab case es habitual para nombrar archivos, ya que el guion (-) se suele utilizar para restar en programación, es un caracter reservado.\nDar estilo con un Linter Por otro lado, hay buenas prácticas que no dependen del lenguaje, ni son globales, son las prácticas referidas al estilo del código. Esto es más difícil de definir porque cada equipo tiene su estilo, pero de nuevo, hay que ponerlo en común para que no haya cambios constantemente en el código, y sea ilegible tanto el código como el git. Los estilos que se definen es si se usarán espacios o tabuladores, si se usa punto y coma o no, etc. Lo bueno es que si todo el equipo utiliza el mismo IDE, existen plugins (Linter) que te ayudan a formatear el código con un estilo concreto sin que el programador tenga que preocuparse por ello.\nBuenas prácticas de programación en Go Lo bueno de Go es que al ser un lenguaje compilado, hay muchas malas prácticas que te corrige el propio compilador, de forma que si el código está mal escrito, se quejará hasta que lo arregles. El lenguaje Golang tiene bien definidas las reglas para minimizar esa diferencia de estilo de programación entre un programa y otro.\nUna de las cosas que más me llamó la atención es que si quieres que algo (una variable, un atributo, una función) sea público, tienes que nombrarlo comenzando por mayúscula. Además creo recordar que antes no permitía usar snake case, pero ahora sí lo permite, aunque la mayoría de programas que veas estarán escritos con camel/pascal case.\nOtra cosa interesante es que no te permite crear variables que no se usen, o tener funciones sin return. Esto es realmente útil porque ayuda a evitar futuros errores que con lenguajes interpretados (JS, PHP, etc) no verías.\nTodas estas prácticas están explicadas en este post escrito por los propios desarrolladores de Golang. Pero hoy quiero ir más allá, no solo con las prácticas más básicas que te corrige el compilador.\n¿Cómo lo hace el mejor programador? ¡Utiliza los comentarios! Seguro que habéis visto una definición cuando dejáis el ratón sobre json.Marshal esto es porque cuando crearon la librería json pusieron encima para qué servía. Si vas a programar packages que luego utilizarán tus compañeros, les será muy útil ver información sobre esa función (qué errores puede retornar, etc.).\n¡Jamás uses panic()! En Go no existen las excepciones, pero panic() hace algo parecido a ellas. Cuando estamos probando algo en Go es muy cómodo utilizar panic() para parar la ejecución y encontrar el error, pero no quieres que tu programa detenga la ejecución en producción. Por eso dentro de tus funciones, siempre que lo necesites, haz return del error, nunca panic().\n¡Nunca uses _ en un error! Si una función retorna un error, es porque hay que controlarlo, sino puede ocurrir “magia“ dentro de tu programa. Y junto a esta práctica: utiliza siempre if err {}, simplemente sigue el programa sin else, de esta manera destacas los errores y evitas el código espagueti.\nNamed returns. En Go una función puede retornar varias variables. La recomendación general es func (n *Node) Parent() (*Node, error) {} en lugar de func (n *Node) Parent2() (node *Node, err error) {}, para evitar ser demasiado “verbose“, aunque el lenguaje ya lo es de por sí. Sin embargo, si la función retorna más de dos parámetros sí que se recomienda usar named returns, ej: func (f *Foo) Location() (lat, long float64, err error)\n¡Variables lo más cortas posibles! Esto aplica sobretodo para las variables dentro de un ámbito. Por ejemplo, si estás construyendo un paquete que tiene una variable que se utiliza en todo el paquete, es recomendable que sea larga y legible, mientras que si una variable solo se utiliza dentro de una función, será lo más corta posible (siempre que se entienda para qué sirve) mejor i que sliceIndex.\nMuchas de estas prácticas han sido extraídas de este otro post, escrito por los propios desarrolladores de Go. Por lo que si quieres conocer más, te recomiendo entrar a él.\n","permalink":"https://arturo-source.github.io/es/posts/buenas-practicas-en-go/","summary":"Conoce las mejores prácticas para tener un código mantenible en el tiempo para el lenguaje Golang","title":"Buenas prácticas programando en Go"},{"content":"En este post explicaré cómo programé uno de los juegos más emblemáticos de la historia, en solo 100 líneas de código. Pero antes, un poco de contexto:\nPara crear un juego, habitualmente utilizaremos un motor gráfico, por ejemplo Unity o Unreal Engine, entre otros. Dentro de un juego tendremos entidades y sistemas. Pero, ¿Qué son las entidades y los sistemas?\nSi has realizado alguna vez POO (Programación Orientada a Objetos) te será más fácil de entender, pero aún así, comencemos con las entidades.\nUna entidad podría ser la serpiente, en el caso del juego que hablamos, pero otra entidad podría ser una manzana. Tanto la manzana como la serpiente tienen una posición X e Y, que definen en qué parte del mapa están.\nY un sistema sería el que se encarga de actualizar los datos del juego. Por ejemplo, existe el sistema de físicas, que cambia la posición X e Y de la serpiente, según si se tiene que mover hacia arriba, abajo, izquierda, o derecha.\nEntonces, ¿cómo has programado el juego? Vamos a dejar de hacer un lío, tanto sistema, entidad, etc. ¡Y vamos a ver código! Las primeras líneas simplemente son constantes (configuraciones del juego):\nconst SQUARE_SIZE = 20; const GAME_WIDTH = 800; const GAME_HEIGHT = 800; const canvas = document.getElementById(\u0026#39;game\u0026#39;); const ctx = canvas.getContext(\u0026#39;2d\u0026#39;); // set width and height full screen canvas.width = GAME_WIDTH; canvas.height = GAME_HEIGHT; Después creamos tres objetos que son las \u0026ldquo;cosas\u0026rdquo; que veremos en la pantalla (entidades).\nvar snake = { body: [ { x: 400, y: 400 }, ], nextMove: \u0026#39;right\u0026#39;, }; var food = { x: 0, y: 0, }; var game = { score: 0, speed: 100, isOver: false, }; ¡Y ahora vamos con el primer sistema! Se trata del sistema de renderizado, básicamente, dibujar las “cosas“ (entidades) en la pantalla:\nfunction drawSnake() { // Draw head ctx.fillStyle = \u0026#39;#3a5a40\u0026#39;; ctx.fillRect(snake.body[0].x, snake.body[0].y, SQUARE_SIZE, SQUARE_SIZE); // Draw body ctx.fillStyle = \u0026#39;#a3b18a\u0026#39;; snake.body.slice(1).forEach(function (part) { ctx.fillRect(part.x, part.y, SQUARE_SIZE, SQUARE_SIZE); }); } function drawFood() { ctx.fillStyle = \u0026#39;red\u0026#39;; ctx.fillRect(food.x, food.y, SQUARE_SIZE, SQUARE_SIZE); } function drawScore() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;20px Arial\u0026#39;; ctx.fillText(\u0026#39;Score: \u0026#39; + game.score, 10, 30); } function drawGameOver() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;50px Arial\u0026#39;; ctx.fillText(\u0026#39;Game Over\u0026#39;, 200, 400); } Y, por supuesto, tenemos una función principal que llama a todas ellas. Lo primero que hace es dibujar toda la pantalla de blanco, y después el resto.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } ¡Ahora tenemos que mover a la serpiente! Tenemos que modificar las posiciones X e Y de la serpiente. Esto se hace con la siguiente función (lo que llamaríamos sistema de físicas):\nfunction moveSnake() { var head = snake.body[0]; var newHead = { x: head.x, y: head.y, }; switch (snake.nextMove) { case \u0026#39;right\u0026#39;: newHead.x += SQUARE_SIZE; break; case \u0026#39;left\u0026#39;: newHead.x -= SQUARE_SIZE; break; case \u0026#39;up\u0026#39;: newHead.y -= SQUARE_SIZE; break; case \u0026#39;down\u0026#39;: newHead.y += SQUARE_SIZE; break; } snake.body.unshift(newHead); snake.body.pop(); } Y lo siguiente que haremos será comprobar si la serpiente ha muerto, o si se ha comido la manzana (sí, ya sabes por dónde vamos, esto se llama sistema de colisiones).\n// Check if snake is out of game function isSnakeOutOfGame() { var head = snake.body[0]; return head.x \u0026lt; 0 || head.x \u0026gt;= GAME_WIDTH || head.y \u0026lt; 0 || head.y \u0026gt;= GAME_HEIGHT; } // Check if snake is eating food function isSnakeEatingFood() { var head = snake.body[0]; return head.x === food.x \u0026amp;\u0026amp; head.y === food.y; } // Check if snake is eating itself function isSnakeEatingItself() { var head = snake.body[0]; return snake.body.slice(1).some(function (part) { return part.x === head.x \u0026amp;\u0026amp; part.y === head.y; }); } Por último, para que el jugador pueda moverse por el mapa, necesitamos que el juego interactue con un controlador, en este caso el teclado. Esto se llama sistema de input.\nfunction handleKeyDown(e) { switch (e.key) { case \u0026#39;ArrowLeft\u0026#39;: if (snake.nextMove !== \u0026#39;right\u0026#39;) { snake.nextMove = \u0026#39;left\u0026#39;; } break; case \u0026#39;ArrowUp\u0026#39;: if (snake.nextMove !== \u0026#39;down\u0026#39;) { snake.nextMove = \u0026#39;up\u0026#39;; } break; case \u0026#39;ArrowRight\u0026#39;: if (snake.nextMove !== \u0026#39;left\u0026#39;) { snake.nextMove = \u0026#39;right\u0026#39;; } break; case \u0026#39;ArrowDown\u0026#39;: if (snake.nextMove !== \u0026#39;up\u0026#39;) { snake.nextMove = \u0026#39;down\u0026#39;; } break; } } Ahora ya tenemos los cuatro sistemas que contienen el 99% de los videojuegos, después puedes añadirle los que quieras, según cuál sea la intención del juego. En este caso necesitamos el sistema de spawn, para hacer aparecer a la manzana cada vez que la serpiente se coma una.\nfunction generateFood() { food.x = Math.floor(Math.random() * (GAME_WIDTH / SQUARE_SIZE)) * SQUARE_SIZE; food.y = Math.floor(Math.random() * (GAME_HEIGHT / SQUARE_SIZE)) * SQUARE_SIZE; } Lo único que nos falta para que esto sea un juego convencional es un main loop, y un estado inicial. Esto sirve para saber cómo empieza el juego, y ejecutar todos los sistemas en orden. Además he añadido una función auxiliar (isGameOver) para saber si la serpiente está muerta. Por lo general haríamos un sistema de vida para controlar esto, pero este juego es tan simple que no lo necesita.\nfunction isGameOver() { return isSnakeOutOfGame() || isSnakeEatingItself(); } // Main game loop function main() { if (isGameOver()) { game.isOver = true; drawGameOver(); return; } if (isSnakeEatingFood()) { snake.body.push({}); game.score += 1; game.speed -= 1; generateFood(); } moveSnake(); drawGame(); setTimeout(main, game.speed); } // Start game function startGame() { snake.body = [ { x: GAME_WIDTH / 2, y: GAME_HEIGHT / 2 }, ]; game = { score: 0, speed: 100, }; generateFood(); main(); } En este caso, el main loop no es un bucle for, o while, sino que aprovechamos que JavaScript está diseñado para ser programado mediante eventos y le decimos al final del main loop que vuelva a llamarse a sí mismo dentro de un tiempo (en este caso 100ms).\nPor último, cabe comentar que comúnmente se ejecutan todos los sistemas en el main loop, en este caso no se está ejecutando el sistema de input porque JavaScript permite poner un listener en paralelo. Esto lo hacemos con el siguiente listener:\ndocument.addEventListener(\u0026#39;keydown\u0026#39;, handleKeyDown); document.getElementById(\u0026#39;start\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, startGame); Ahora quiero aprender más, ¿cómo creo otro juego? Ahora que has entendido el concepto de entidad y sistema, ya puedes empezar a programar tu propia idea de videojuego. Ya sea sin motor gráfico (como lo acabamos de ver ahora), o utilizando un motor profesional, ya sea Unity, Game Maker, Unreal Engine, o cual sea.\nPero antes, si quieres ver más en profundidad te aportaré dos recursos:\nMi TFG (también en GitHub), el cual está dividido en tres partes, en la primera se hace un motor de videojuegos, en la segunda se crea un juego usando este motor, y en la tercera se añade inteligencia artificial a este juego creado. El curso de mi tutor del TFG. Con el cual aprendí todo lo que sé de videojuegos, y si te interesa aprender a hacer tu propio motor de videojuegos desde cero, es el mejor recurso que vas a tener. Prueba el juego aquí mismo ","permalink":"https://arturo-source.github.io/es/posts/juego-snake-100-lineas-de-codigo/","summary":"Esta es mi implementación del famoso juego Snake. He tratado de hacerla lo más sencilla posible, y por eso con una cantidad tan pequeña de código.","title":"Programé un Snake con solo 100 líneas de código"},{"content":" Algunos de vosotros conoceréis la aplicación Telegram. Se trata de una aplicación de mensajería instantánea con muchas funcionalidades, entre ellas, crear tus propios bots. Esto puede resultar muy útil en distintas ocasiones, que es posible que presente en futuros post, pero de momento esto lo dejo a vuestra imaginación. ‌ Lo único que necesitamos para crear un bot en Telegram es:\nUna forma de hacer peticiones http. Una cuenta de Telegram. Enviar mensajes en Telegram con un bot No os preocupéis porque ambas cosas son muy sencillas de conseguir, y da igual el lenguaje de programación. Por lo tanto, al grano, así se envía un mensaje por Telegram siendo un bot en los distintos lenguajes:\nCódigo para hacer una petición http con Go, PHP, JS, Python y bash Enviar un mensaje de texto con Go:\nfunc SendMessage(msg string) error { token := os.Getenv(\u0026#34;TELEGRAM_TOKEN\u0026#34;) chatID := os.Getenv(\u0026#34;TELEGRAM_CHAT_ID\u0026#34;) url := fmt.Sprintf(\u0026#34;https://api.telegram.org/bot%s/sendMessage?chat_id=%s\u0026amp;text=%s\u0026#34;, token, chatID, msg) resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() return nil } Enviar un mensaje de texto con PHP: (referencia del código)\nfunction sendMessage($chatID, $messaggio, $token) { $url = \u0026#34;https://api.telegram.org/bot\u0026#34; . $token . \u0026#34;/sendMessage?chat_id=\u0026#34; . $chatID; $url = $url . \u0026#34;\u0026amp;text=\u0026#34; . urlencode($messaggio); $ch = curl_init(); $optArray = array( CURLOPT_URL =\u0026gt; $url, CURLOPT_RETURNTRANSFER =\u0026gt; true ); curl_setopt_array($ch, $optArray); $result = curl_exec($ch); curl_close($ch); return $result; } Enviar un mensaje de texto con JS (si usas node recuerda activar el flag \u0026ndash;experimental-fetch):\nconst sendMessage = async (message) =\u0026gt; { const url = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`; const body = { chat_id: process.env.TELEGRAM_CHAT_ID, text: message, }; const options = { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify(body), }; const response = await fetch(url, options); return await response.json(); }; Enviar un mensaje de texto con Python: (referencia del código)\nimport requests TOKEN = \u0026#34;YOUR TELEGRAM BOT TOKEN\u0026#34; chat_id = \u0026#34;YOUR CHAT ID\u0026#34; message = \u0026#34;hello from your telegram bot\u0026#34; url = f\u0026#34;https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}\u0026amp;text={message}\u0026#34; response = requests.get(url) print(response.json()) Enviar un mensaje de texto con curl: (referencia del código)\ncurl -X POST \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;chat_id\u0026#34;: \u0026#34;YOUR_CHAT_ID\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is a test from curl\u0026#34;}\u0026#39; \\ https://api.telegram.org/bot$YOUR_BOT_TOKEN/sendMessage En todos los lenguajes se hace de forma similar, sin embargo, para conocer todas las opciones que nos permite usar Telegram, recomiendo leer su documentación.\nCrear un bot en Telegram Vale Arturo, ya sabemos cómo se manda un mensaje pero, ¿qué son el TOKEN y el CHAT_ID?\nSeguro que te estás preguntando eso ahora mismo, este es el segundo punto del que hablaba al principio. Lo siguiente que necesitas es crear tu bot, y para ello tienes que hablarle a BotFather, él te guiará para crear tu primer bot. Al final del todo te aparecerá un mensaje donde verás un token, este es el TOKEN del que hablábamos todo el rato, cópialo y guárdalo en un lugar seguro.\nAhora falta el CHAT_ID. Este parámetro ya depende de lo completo que queramos hacer nuestro bot, pero inicialmente querremos saber nuestro CHAT_ID para comenzar las pruebas, esto es tan sencillo como los pasos anteriores. Lo que tendremos que hacer es una petición GET a esta url: https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates. Esto lo podemos hacer con el propio curl curl https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates o simplemente accediendo a esa url desde nuestro navegador. Resulta obvio pero recuerdo que tienes que cambiar \u0026lt;token\u0026gt; por el TOKEN que acabas de copiar en el paso anterior.\nYa no hay nada más que hacer, copia estas dos variables en tu código, o guárdalas como variables de entorno (recomendable por seguridad), o pásalas como parámetro a la función como en el ejemplo en PHP. Enviar un mensaje con un bot es así de simple, el resto de la lógica te la dejo a ti, puedes combinarla con un arduino para que te avise de la humedad de la casa, para que te avise cuando tu equipo marque un gol… el límite está en tu imaginación.\nBibliotecas para crear bots en Telegram Por supuesto, si lo que quieres es hacer un bot más complejo, que envíe fotos, que responda a mensajes, u otras funcionalidades, no te recomiendo que implementes tú mismo el código. Con una simple búsqueda en Google como “Telegram bot library in …“ añades tu lenguaje favorito, encontrarás miles. También te recomiendo mirar directamente las librerías recomendadas por el propio Telegram.\n","permalink":"https://arturo-source.github.io/es/posts/crear-bot-de-telegram/","summary":"Programa tu primer bot de Telegram sin ninguna dependencia, con puro código.","title":"Crea un bot de Telegram desde 0"},{"content":"A pesar de que en el anterior post se explicasen todas las bases necesarias para comenzar a aprender en la programación, lo que voy a mostrar ahora son conceptos algo más avanzados, los cuales ya no conforman algo básico y necesario para comenzar a programar. Quiero que sirvan como ejemplo de cómo continuar aprendiendo, y por último, dejaré unos recursos para que podáis seguir aprendiendo por vuestra cuenta. Después de eso solo faltará que imaginéis qué es lo que queréis programar después.\nRecursión en Go La recursión es algo que existe en muchos lenguajes, y que se utiliza en algunos problemas informáticos debido a que algunos problemas resultan ser más sencillos de resolver. Sin embargo, es algo que a la gente le suele costar más entender porque no es tan fácil seguir el flujo del programa.\nA continuación veremos algunos problemas de recursión, aunque no en todos la mejor solución es la recursiva (a veces la mejor solución es la programación común, que se llama imperativa).\nResolver la sucesión de Fibonacci con recursión func fibonacci(n int) int { if n \u0026lt;= 1 { return n } return fibonacci(n-1) + fibonacci(n-2) } Como bien hemos dicho antes, la solución recursiva no suele ser la más eficiente, como sucede en este caso. Sin embargo, resulta una solución elegante, y sencilla de leer.\nSi el número es menor o igual a 1, devolvemos el número (el fibonacci de 0 es 0, y el de 1 es 1). Si no, devolvemos la suma del anterior y el anterior al anterior (el fibonacci de 2 es fibonacci(1) 1 + fibonacci(0) 0, el de 3 es fibonacci(2) 1 + fibonacci(1) 1, y así sucesivamente). Con estas dos simples reglas, que son las mismas que se enuncian en la sucesión de Fibonacci, podemos resolver el problema de forma recursiva.\nLeer archivos en Go Cada lenguaje de programación tiene su forma de leer archivos, pero cada uno de ellos tiene sus peculiaridades. En Go podemos acudir al recurso que os dejé en el post anterior (gobyexample). Personalmente, siempre que no recuerdo cómo hacerlo (suele ser común), acudo a https://gobyexample.com/reading-files, y allí encuentro un simple ejemplo.\nPor supuesto, depende de lo que queramos hacer, si es un archivo muy grande, si queremos leerlo por líneas, si el archivo es una imagen, etc. Y para ello puede que nos toque hacer alguna búsqueda más. Pero la manera más simple de hacerlo es la siguiente:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { dat, err := os.ReadFile(\u0026#34;/tmp/dat\u0026#34;) if err != nil { panic(err) } fmt.Print(string(dat)) } Lo primero que hacemos es importar el paquete os, que es el que nos permite leer archivos. Después, en la función main llamamos a os.ReadFile, que recibe como parámetro la ruta del archivo que queremos leer. Si todo ha ido bien, nos devuelve un array de bytes, y un error. Si el error es distinto de nil, es que ha habido algún problema, y por tanto, podemos parar el programa con panic. No es una práctica recomendable usar panic en el flujo de un programa normal, pero en este caso, es lo más sencillo.\nEn caso de que no haya error, utilizamos fmt.Println que ya hemos visto en el post anterior, para imprimir el contenido del archivo. Pero como el contenido del archivo es un array de bytes, lo convertimos a string con string(dat).\nLeer json en Go Pero, ¿de qué nos sirve leer un archivo para mostrar su contenido? Pues de poco, porque eso lo podremos hacer con cualquier programa. Lo que querremos hacer habitualmente es utilizar la información que existe dentro. En este caso, vamos a leer un archivo json, y vamos a utilizar la información que contiene.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type User struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // Read json file func ReadJson(filepath string) (User, error) { var user User file, err := os.Open(filepath) if err != nil { return user, err } defer file.Close() err = json.NewDecoder(file).Decode(\u0026amp;user) return user, err } func main() { user, err := ReadJson(\u0026#34;user.json\u0026#34;) if err != nil { panic(err) } fmt.Println(\u0026#34;Username:\u0026#34;, user.Username) fmt.Println(\u0026#34;Age:\u0026#34;, user.Age) } Este código es más grande de lo que hemos visto hasta ahora, pero vamos a ir parte por parte para que veáis cómo funciona. Primero importaremos encoding/json, que es el paquete que nos permite leer archivos json. Junto con os y fmt, que ya hemos visto.\nSi habéis llegado hasta aquí, doy por hecho que sabéis lo que es un JSON, pero por si acaso, os dejo este enlace de la Wikipedia que os puede servir de ayuda: https://es.wikipedia.org/wiki/JSON.\nEn otros lenguajes como JavaScript, no hace falta definir la estructura, ya que el json se puede leer sin conocimiento de cómo es el objeto. Pero en Go, no podemos hacerlo, y por tanto, tenemos que definir la estructura (al igual que sucede en TypeScript).\nDespués, definimos una estructura User, que es la que vamos a encontrarnos al leer el json. En este caso, el json tiene dos campos, username y age, y los vamos a guardar en la estructura User. Para ello, utilizamos la etiqueta json que nos permite indicar el nombre del campo en el json.\nAhora vamos con lo importante. La función ReadJson recibe como parámetro la ruta del archivo que queremos leer. En este caso, el archivo se llama user.json. La función devuelve un User, y un error. Si todo ha ido bien, el error será nil, tal cual hemos visto antes. Este es un comportamiento común en Go, que nos permite saber si ha habido algún error.\nAl principio de la función definimos una variable user de tipo User, que es la que vamos a devolver. Después, abrimos el archivo con os.Open, y si ha habido algún error, lo devolvemos. Si no, cerramos el archivo con defer file.Close(). Esto es importante, porque si no cerramos el archivo, puede provocar problemas. defer nos permite ejecutar una función al final de la función en la que se ha definido. En este caso, se ejecutará file.Close() al final de la función ReadJson.\nDespués, creamos un decodificador de JSON, que va a convertir los bytes del archivo (el texto que podemos leer al abrirlo con un editor de texto), en un objeto de Go. Para ello, utilizamos json.NewDecoder(file). Y lo guardamos en la variable user. Para ello, utilizamos Decode(\u0026amp;user). El \u0026amp; es algo que no hemos visto hasta ahora, pero lo dejo como deberes para que investigueis por vuestra cuenta.\nY por último, devolvemos el usuario y el error. Si todo ha ido bien, el error será nil.\nServidor web en Go Y esto es lo último que vamos a ver en este post. El resto del aprendizaje tendréis que hacerlo por vosotros mismos, y para ello os dejo algunos enlaces al final que os pueden servir de ayuda.\nVamos a crear un servidor web en Go. Para ello, vamos a utilizar el paquete net/http, que es el que nos permite crear servidores web. En otros lenguajes tendrías que elegir una librería externa, pero en Go, ya viene incluida. Después puedes investigar sobre frameworks que te faciliten la vida, como gin o echo. Sin embargo, la librería por defecto de Go es bastante completa.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func headers(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026#34;%v: %v\\n\u0026#34;, name, h) } } } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } Este ejemplo es de nuevo de gobyexample https://gobyexample.com/http-server. Como anteriormente hicimos, lo primero será importar las librerías necesarias. Para este ejemplo usaremos la ya mencionada net/http.\nEn este caso, tenemos dos funciones, hello y headers. La primera simplemente devuelve un texto, y la segunda devuelve los headers de la petición. Para estos conceptos puede que necesitemos algo de conocimientos sobre http, pero como no es el tema a tratar, simplemente entrad a la url https://localhost:8090/hello y https://localhost:8090/headers para ver el resultado.\nLo único que haremos será definir dos rutas, /hello y /headers, y las asociamos a las funciones que hemos definido antes. Nota que las funciones ya no llevan () como en todas las ocasiones que las hemos usado antes. Esto es porque no las estamos ejecutando, sino que las estamos pasando como parámetro a otra función (como si fuera un int, o un float).\nPor último, iniciamos el servidor web en el puerto 8090.\nRest API con Go Efectivamente, ya tenemos un servidor web, con tan solo unas pocas líneas de código. Pero, ¿qué pasa si queremos que el servidor devuelva un json? ¿O que reciba un json? ¿O que devuelva un json en función de los parámetros que le pasemos? Pues para eso puede que requiramos de un framework, que nos puede facilitar la vida, como los ya mencionados gin o echo.\nPero usemos lo aprendido a lo largo del post, y podemos crear un servidor web que trabaje con json con los conocimientos que tenemos.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;net/http\u0026#34; ) func myFunc(w http.ResponseWriter, req *http.Request) { json.NewEncoder(w).Encode(map[string]string{\u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34;}) } func main() { http.HandleFunc(\u0026#34;/myJson\u0026#34;, myFunc) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } Con lo ya aprendido, debería ser sencillo comprender lo que hay en este ejemplo. Pero vamos con la explicación línea a línea.\nPrimero, importamos las librerías encoding/json y net/http. Después, creamos una función myFunc. Y en el main, lo ya comentado, la primera línea declara la ruta /myJson que responderá la función myFunc, y la segunda inicia el servidor web en el puerto 8090.\nLo que sucede en la función myFunc nos debería sonar, porque antes lo hemos hecho para decodificar (al leer el archivo json), pero ahora lo que queremos hacer es codificarlo, de esta manera podremos mandar la información como bytes (el texto que podemos leer con un editor de texto) al cliente.\nLo más extraño es map[string]string{\u0026quot;hello\u0026quot;: \u0026quot;world\u0026quot;}, pero es simplemente un diccionario de Go. En este caso, la clave es un string, y el valor también. Puedes investigar sobre ellos en https://gobyexample.com/maps.\nConclusión Ahora quedarán más preguntas en el aire, pero todo ello es parte del aprendizaje. Lo que tendréis que hacer es investigar por vuestra cuenta, porque es lo que se aplica en la vida real cuando se trata de la programación. Cuando tengáis una idea sobre el proyecto que queréis hacer, buscad en internet cómo se hace, que seguro que hay alguien que ha tenido el mismo problema que vosotros anteriormente.\nSi queréis continuar con el aprendizaje en Go, os recomiendo los siguientes recursos que serán de gran ayuda:\nhttps://go.dev/tour/ es un tutorial interactivo de Go, que os ayudará a entender los conceptos desde lo más básico hasta temas más avanzados. https://roadmap.sh/golang sirve para conocer las librerías más populares de Go y cómo se relacionan con tus necesidades dependiendo del proyecto. ","permalink":"https://arturo-source.github.io/es/posts/aprende-go-desde-cero-parte-2/","summary":"Aprende conceptos más avanzados como leer un archivo, recursión, crear un servidor, y más.","title":"Aprende el lenguaje Go desde 0 (parte 2)"},{"content":"El script del que hablaré durante este post puede ser descargado en el siguiente enlace.\nUn script muy simple que puedes configurar desde el json ¿Alguna vez has querido estar pendiente de los cambios de un sitio web? Puede que quieras ver cómo evoluciona el precio de un producto que te interesa, ¡o a saber qué cambios quieres ver!\nCon este sencillo script puedes hacerlo en tan solo unos segundos. Veamos los sencillos pasos para configurar el script. Todo lo que tienes que hacer es configurar el archivo settings.json.\nRequerimientos Primero, debes tener instalado el intérprete de PHP y crontab en su computadora o su servidor.\nPHP crontab (presente en los ordenadores Linux) Editor de texto Variables que hay que configurar Las variables que tendrás que cambiar son:\n{ \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;check_changes\u0026#34;: true, \u0026#34;notify_telegram\u0026#34;: true, \u0026#34;chat_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bot_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xpaths\u0026#34;: { \u0026#34;Price\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Units for sale\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Page Title\u0026#34;: \u0026#34;/html/head/title\u0026#34; } } url (obligatorio) xpaths (obligatorio) chat_id (opcional, sirve para notificar mediante Telegram) bot_token (opcional, sirve para notificar mediante Telegram) Obtener url es muy fácil, puedes copiarla desde la parte superior del navegador. Obtener los xpaths es un poco más difícil, una vez que estás en la página web, debes hacer clic derecho sobre ella. Luego selecciona la opción \u0026ldquo;Inspeccionar\u0026rdquo;. Luego, verás un elemento de flecha como el siguiente (izquierda):\nAhora tienes que seleccionar el elemento html en la página web, haz clic izquierdo sobre él.\nLuego, el código html estará marcado, por lo que el último paso es hacer clic derecho sobre él y seleccionar \u0026ldquo;Copiar\u0026rdquo; \u0026gt; \u0026ldquo;XPath\u0026rdquo;\nEl último paso es pegarlo en la configuración json \u0026quot;Price\u0026quot;: \u0026quot;/html/body/main/div[4]/.......\u0026quot; (lo de la izquierda es un nombre de identificación y la derecha es el xpath), y tendrás el script configurado (recuerda que puedes agregar todos los xpaths, tantos como quieras).\nPero tal vez quieras recibir una notificación cuando ocurra algún cambio, por lo que debes configurar las notificaciones.\nConfigurar las notificaciones También es muy sencillo, si alguna vez has usado Telegram. Supondré que tienes una cuenta de Telegram y un cliente para usarla (la aplicación oficial del móvil u ordenador, por ejemplo).\nCrea un bot: Habla con @BotFather, él te guiará. Copia el token del bot: Puedes pegarlo ahora en la configuración json, de lo contrario tendrás que hacerlo más tarde. Habla con tu nuevo bot: Puedes hablarle directamente o crear un grupo (o canal) con tus amigos y agregar el bot allí. Accede a la siguiente URL en tu navegador (no olvides cambiar \u0026lt;token\u0026gt; con tu token): https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates Obtendrás un json como el siguiente:\nLuego, puedes elegir el Telegram ChatID y pegarlo también en la configuración json, recuerda que notify_telegram tiene que ser true para habilitar las notificaciones. Y tendrás el script totalmente configurado. Pero ahora tienes que decidir con qué frecuencia quieres que el bot te notifique.\nConfigurar el crontab Crontab es una herramienta realmente útil que puede tener instalada en tu ordenador o servidor Linux. Te ayuda a realizar tareas recurrentes automáticamente. Y es realmente fácil de configurar, pero el primer uso puede ser confuso. Puedes acceder a [esta página para configurar crontab fácilmente] (https://crontab.guru/). La opción más común será el domingo, a las 12:00 por ejemplo, así que escribirás 0 12 * * 0 junto al comando. Pero tal vez quieras ejecutarlo siempre que enciendas la computadora, luego escribirás @reboot al lado del comando.\nPara abrir la configuración de cron, abra una terminal y escriba crontab -e, le permite editar las configuraciones de cron. Abrirá un archivo con un editor, puede ser nano. Así que solo tienes que pegar el siguiente comando y dejarlo así:\n* * * * * php /route/to/script/check-change.php Y finalmente guarda la configuración con ctrl+o y cierra el editor con ctrl+x.\nOtra configuración posible es consultar la página web todos los días a una hora determinada, pero quieres que te avisen aunque haya cambiado o no. También es fácil. Solo tiene que establecer check_changes en false en la configuración json, esto hará que no distinga si hay cambios o no, y si tiene notify_telegram con valor true, te notificará de todos modos. Este es un ejemplo para ser notificado todos los días a las 12:00\n0 12 * * * php /route/to/script/check-change.php Y eso es todo. Gracias por llegar hasta aquí, espero poder haberte ayudado.\n","permalink":"https://arturo-source.github.io/es/posts/comprobar-cambios-en-una-pagina-web/","summary":"Script en PHP que puedes configurar fácilmente para que compruebe los cambios de una página web, y te notifique mediante Telegram.","title":"Comprobar cambios en página web"},{"content":"Aprender Golang, el lenguaje desarrollado por Google Este post está basado en el siguiente vídeo de mi canal. Este vídeo está en español y podrás verlo aquí:\nLas cosas que necesitarás para seguir este tutorial son las siguientes:\nUn editor (VSCode): https://code.visualstudio.com/ El compilador de Go: https://go.dev/dl/ \u0026ldquo;Hola mundo\u0026rdquo; en Go El primer programa que escriben todos los programadores siempre es el conocido \u0026ldquo;Hola mundo\u0026rdquo;. En el lenguaje de Go se escribiría de la siguiente manera:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hola mundo\u0026#34;) } Simplemente basta con que crees un archivo de texto llamado \u0026ldquo;main.go\u0026rdquo;, que copies esta pieza de código y continúes con lo siguiente que vamos a aprender.\nCómo compilar en Go Compilar con el lenguaje Go es muy sencillo, existen dos formas principalmente. Escribimos en la terminal go build main.go y se generaría un ejecutable, que podríamos ejecutar desde una terminal escribiendo ./main.\nLa segunda forma y la que vamos a utilizar a lo largo del tutorial es go run main.go. De esta forma estaremos compilando y ejecutando el programa en una sola instrucción, que es lo que necesitamos para empezar.\nAhora hazlo tú en la terminal y deberías ver como se escribe en la consola un \u0026ldquo;Hola mundo\u0026rdquo;.\nEscribir comentarios en Golang Los comentarios son algo que tienen todos los lenguajes, y pueden tener múltiples usos, uno de ellos sería comentar el código. Conviene no abusar para que no quede un código ilegible. Se escriben con doble barra al principio // o si vas a escribir varias lineas, al principio pones /* y al final */.\nEste sería un ejemplo de un comentario, aunque un mal ejemplo porque ensucia el código:\npackage main import \u0026#34;fmt\u0026#34; func main() { // Println sirve para imprimir lo que haya entre \u0026#34;\u0026#34; en la consola fmt.Println(\u0026#34;Hola mundo\u0026#34;) } ¿Qué es una variable? Variables en Go Existen varios tipos de variable en programación, los básicos son int, float, string y bool. Cada tipo de variable tiene un uso.\nint es para hacer operaciones con números enteros (sumas, restas, etc.) float es igual que int pero con números decimales string es un tipo de variable para cadenas de caracteres (ej. \u0026ldquo;Hola mundo\u0026rdquo;) bool solo puede valer dos cosas true y false. En el siguiente código declararemos las variables edad como int, euros como float, nombre como string, y brilla como bool.\npackage main import \u0026#34;fmt\u0026#34; func main() { var edad int edad = 10 fmt.Println(\u0026#34;La edad que tendré dentro de 5 años es\u0026#34;, edad+5) var euros float32 euros = 10.3 fmt.Println(\u0026#34;Si tengo\u0026#34;, euros, \u0026#34;y me gasto la mitad, tendré\u0026#34;, euros/2) var nombre string nombre = \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;Mi nombre es\u0026#34;, nombre) var brilla bool brilla = true fmt.Println(\u0026#34;El valor de brilla es\u0026#34;, brilla) } Cabe destacar que, a diferencia de otros lenguajes, en Go no hace fata decir el tipo de variable explícitamente, pero puede que cuando estás aprendiendo prefieras empezar declarándolas explícitamente para enterarte de lo que estás haciendo. Se puede escribir el mismo código de la siguiente manera:\npackage main import \u0026#34;fmt\u0026#34; func main() { edad := 10 fmt.Println(\u0026#34;La edad que tendré dentro de 5 años es\u0026#34;, edad+5) euros := 10.3 fmt.Println(\u0026#34;Si tengo\u0026#34;, euros, \u0026#34;y me gasto la mitad, tendré\u0026#34;, euros/2) nombre := \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;Mi nombre es\u0026#34;, nombre) brilla := true fmt.Println(\u0026#34;El valor de brilla es\u0026#34;, brilla) } Operaciones matemáticas en Go En todos los lenguajes de programación, existen operaciones matemáticas, como sumar, restar, multiplicar, dividir, etc. Los símbolos que usarás para realizar estas operaciones son los siguientes:\n+: Sirve para sumar -: Sirve para restar *: Sirve para multiplicar /: Sirve para dividir %: Es el módulo (resto de la división) ^: Sirve para elevar a la potencia package main import \u0026#34;fmt\u0026#34; func main() { var numero int = 10 fmt.Println(\u0026#34;El número es\u0026#34;, numero) fmt.Println(\u0026#34;El número + 1 es\u0026#34;, numero+1) fmt.Println(\u0026#34;El número - 1 es\u0026#34;, numero-1) fmt.Println(\u0026#34;El número * 2 es\u0026#34;, numero*2) fmt.Println(\u0026#34;El número / 2 es\u0026#34;, numero/2) fmt.Println(\u0026#34;El número % 2 es\u0026#34;, numero%2) fmt.Println(\u0026#34;El número ^ 2 es\u0026#34;, numero^2) } Estructuras condicionales en Go (if y else) Donde se suelen utilizar las variables booleanas (bool) son en este contexto. Veamos el siguiente código:\npackage main import \u0026#34;fmt\u0026#34; func main() { var brilla bool brilla = true if brilla { fmt.Println(\u0026#34;El objeto brilla\u0026#34;) } } Si lo copias y lo pegas en tu archivo main.go, y ejecutas el siguiente comando que hemos mencionado antes go run main.go obtendrás como salida \u0026ldquo;El objeto brilla\u0026rdquo;.\n¡Genial! Pero antes me habías dicho que bool puede valer true, o false, ¿para qué sirve la opción de false? Pues en la sintaxis del if siempre puede ir acompañado con un else. Lo que haya dentro de los corchetes {} será lo que se ejecutará cuando el valor de brilla sea false. Prueba con el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var brilla bool brilla = false if brilla { fmt.Println(\u0026#34;El objeto brilla\u0026#34;) } else { fmt.Println(\u0026#34;El objeto NO brilla\u0026#34;) } } Si ahora ejecutas el comando go run main.go ¿qué salida obtienes?\nSi ya lo has probado, verás que obtendrás \u0026ldquo;El objeto NO brilla\u0026rdquo;, y esto es porque el valor de brilla lo hemos cambiado a false.\nComparadores dentro de un if En muchas ocasiones, no tendrás que declarar una variable booleana para usar ifs, lo que harás será usar comparaciones. Los símbolos que se utilizan en programación son\n\u0026gt; Para indicar mayor que. \u0026gt;= Para indicar mayor o igual que. \u0026lt; Para indicar menor que. \u0026lt; Para indicar menor o igual que. == Para indicar si son iguales. != Para indicar si son distintos. package main import \u0026#34;fmt\u0026#34; func main() { altura_claudio := 1.70 altura_victor := 1.62 if altura_claudio \u0026gt; altura_victor { fmt.Println(\u0026#34;Claudio es más alto que Victor\u0026#34;) } else { fmt.Println(\u0026#34;Victor es más alto que Claudio\u0026#34;) } } Pero ahora tenemos un caso más, Claudio y Victor pueden no ser uno mayor que el otro, tenemos que contemplar la opción de que ambos sean igual de altos. Para ello utilzaremor el último caso que se puede dar dentro de una estructura condicional, que es el else if. Sirve para expresar una opción que no está dentro de \u0026ldquo;el resto de opciones\u0026rdquo;. Veamos el ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { altura_claudio := 1.70 altura_victor := 1.62 if altura_claudio \u0026gt; altura_victor { fmt.Println(\u0026#34;Claudio es más alto que Victor\u0026#34;) } else if altura_victor \u0026gt; altura_claudio { fmt.Println(\u0026#34;Victor es más alto que Claudio\u0026#34;) } else if altura_claudio == altura_victor { fmt.Println(\u0026#34;Claudio y Victor miden lo mismo\u0026#34;) } } Cabe destacar que podemos usar if, else if y else todos en la misma sentencia. En este caso prueba a copiar el código de arriba y ejecutar de nuevo go run main.go. Ahora prueba a cambiar los valores de las alturas para ver los distintos resultados. Verás que lo que aparece en la terminal va cambiando.\nMás de una condición en un if Puedes usar más de una condición en un if. Los operadores que se usan para añadir más condiciones a un if son:\n\u0026amp;\u0026amp; Para indicar que se deben cumplir ambas condiciones. || Para indicar que se debe cumplir al menos una condición. ! Para indicar que se debe cumplir la condición contraria. Veamos el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var hora int = 12 if hora \u0026gt; 8 \u0026amp;\u0026amp; hora \u0026lt; 18 { fmt.Println(\u0026#34;Estamos en horario de trabajo\u0026#34;) } else { fmt.Println(\u0026#34;Estamos fuera de horario de trabajo\u0026#34;) } } Podemos ver que si la hora es mayor a 8 y menor a 18, el programa imprime \u0026ldquo;Estamos en horario de trabajo\u0026rdquo;, es decir, que la hora ha de estar entre esos dos valores, pero no que sea exactamente esos valores. Si quisiéramos incluir las 8 y las 18 usaríamos los operadores que ya conocemos \u0026gt;= y \u0026lt;=.\nLa operación con || se entiende fácilmente porque es una operación lógica que se ejecuta si alguna de las condiciones es verdadera. A diferencia de \u0026amp;\u0026amp; que solo se ejecuta si ambas condiciones son verdaderas.\nPero lo que falta por saber es cómo se utiliza !. Veamos el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var dinero int = -5 if !(dinero \u0026gt; 0) { fmt.Println(\u0026#34;Tienes un saldo negativo\u0026#34;) } } Ahora si has ejecutado este programa con go run main.go obtendrás que el programa imprime \u0026ldquo;Tienes un saldo negativo\u0026rdquo;. Esto es porque dinero NO es mayor a cero, dinero \u0026gt; 0 equivale a false, pero el operador ! lo cambia a true.\nObtendríamos el mismo resultado si habíamos puesto la sentencia dinero \u0026lt;= 0 que es justo lo contrario a dinero \u0026gt; 0.\nArrays en Golang Si queremos tener un conjunto de datos en todos los lenguajes, no vamos declarando las variables una a una, como hemos hecho hasta ahora altura_claudio, altura_victor, etc. Lo que haremos será utilizar un Array. La sintaxis sería la siguiente:\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) } Sin embargo, lo podemos simplificar como antes, usando :=\npackage main import \u0026#34;fmt\u0026#34; func main() { alturas := []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) } Copia cualquiera de los dos códigos y ejecútalo para ver la salida en la consola.\nBien, los arrays son colecciones de datos pero ¿para qué sirven? Cuando quieras hacer operaciones con muchos datos, como un sumatorio, necesitarás recorrer todos los datos, y es por esto que necesitamos combinar los arrays con bucles.\nBucles en Golang Pero antes de empezar de forma complicada, vamos con lo más simple. Si queremos escribir en la consola todos los números desde el 0 hasta el 10, lo que haremos será escribir el siguiente código:\npackage main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt;= 10; i++ { fmt.Println(i) } } Este código escribirá todos los numeros del 0 al 10 en la consola al ejecutar go run main.go. Pero vamos a analizarlo paso por paso porque aquí han entrado muchos conceptos nuevos.\nLo que hay entre la palabra for y el corchete abierto { separado por ; es lo siguiente:\ni := 0 inicia el valor de la variable i a 0. i \u0026lt;= 10 es una comparación de menor o igual a 10. i++ incrementa el valor de i en 1. Es decir, el valor inicial es 0, y ha sido guardado en una variable que se llama i. Y lo que hay dentro de los corchetes {} se ejecutará hasta que la comparación sea falsa, en este caso, hasta que i valga 11. Por último utilizamos el operador ++, que no habíamos visto hasta ahora, pero es muy útil cuando usamos bucles porque incrementa la variable de uno en uno.\nRecorrer arrays en Go Ahora volvemos con los arrays. Una vez conocemos la sintaxis en los bucles de Go, vamos a combinar este conocimiento con los arrays. Ahora queremos acceder a todos los valores dentro del array, pues lo que haremos será lo siguiente.\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) for i := 0; i \u0026lt; len(alturas); i++ { fmt.Println(\u0026#34;La altura número\u0026#34;, i, \u0026#34;es\u0026#34;, alturas[i]) } } Ejecútalo con go run main.go y verás la salida. De nuevo vemos cosas nuevas, ahora entre el for y el corchete { está la sentencia i \u0026lt; len(alturas) donde antes había un i \u0026lt;= 10. Y es que cuando usamos len() nos va a devolver la cantidad total de valores en el array, en este caso vemos que hay 4.\nAdemás, al final del Println hemos escrito alturas[i]. Cuando usamos los corchetes de array [] le indicamos la posición a la que queremos acceder del array. En el primer caso i vale 0. Esto último es un poco contraintuitivo porque los humanos siempre hemos empezado a contar desde 1, pero las máquinas empiezan a contar desde 0, por lo tanto, la primera posición del array es la posición 0. Lo siguiente serían las posiciones 1, 2 y 3.\nExisten más formas de utilizar el for, pero con esto ya sabremos lo más básico.\nOtro tipo de bucle en Go Hay que aclarar que en otros lenguajes se tiene la posibilidad de utilizar while. En Go no existe esta palabra reservada, pero podemo hacer uso de for como si se tratase de un while.\nEl while es un bucle que se ejecuta mientras la condición es verdadera. Es parecido al if ya que solo tenemos que escribir la condición y el cuerpo del bucle.\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 0 for i \u0026lt;= 10 { fmt.Println(i) i++ } } Este programa debería hacer lo mismo que el primero que hemos escrito en la explicación de los bucles, el bucle se ejecutará 11 veces, y escribirá los números del 0 al 10.\nÚltimo repaso para refrescar las condiciones y los bucles A estas alturas ya deberías saber utilizar los if y los for. Ahora vamos a combinar ambos para comprenderlos a la perfección. Vamos a recorrer todos los valores de un array y decidir si es lo suficientemente alto.\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) for i := 0; i \u0026lt; len(alturas); i++ { if alturas[i] \u0026gt; 1.65 { fmt.Println(\u0026#34;La persona número\u0026#34;, i, \u0026#34;es bastante alto\u0026#34;) } else { fmt.Println(\u0026#34;La persona número\u0026#34;, i, \u0026#34;es no es suficientemente alto\u0026#34;) } } } Prueba a ejecutar el código con go run main.go y entiende la salida.\nFunciones en Go Lo último que tienes que aprender para conocer lo más básico de la programación es las funciones. Las funciones son una forma de organizar nuestra código, y es una forma de reutilizar código. Les debemos dar un nombre que haga que el código resulte más fácilmente legible.\nEn Go escribiremos la palabra func, luego el nombre de la función, y después entre paréntesis los argumentos que recibe la función.\npackage main import \u0026#34;fmt\u0026#34; func CalculaPrecioConIVA(precio float32) float32 { return precio * 1.21 } func main() { precio := CalculaPrecioConIVA(10.0) fmt.Println(precio) } Como podemos ver, la función CalculaPrecioConIVA recibe un argumento de tipo float32, y devuelve un argumento de tipo float32. No es necesario que todas las funciones devuelvan algo, pero si lo devuelven, tenemos que poner después de cerrar el paréntesis ) y antes de abrir el corchete { el tipo de variable que devuelve la función.\nSi quisiéramos crear una función que no devuelva nada, sería tan sencillo como lo siguiente:\npackage main import \u0026#34;fmt\u0026#34; func DiHolaA(nombre string) { fmt.Println(\u0026#34;Hola\u0026#34;, nombre) } func main() { DiHolaA(\u0026#34;Arturo\u0026#34;) } Dentro de las funciones podemos introducir toda la lógica que queramos, no hace falta que sea de pocas lineas como hemos hecho hasta ahora. Por ejemplo, vamos a avanzar un poquito con la dificultad y vamos a verificar si un número es primo:\nUn número es primo si solo es divisible por 1 y por sí mismo.\npackage main import \u0026#34;fmt\u0026#34; func EsPrimo(numero int) bool { for i := 2; i \u0026lt; numero; i++ { if numero%i == 0 { return false } } return true } func main() { fmt.Println(\u0026#34;¿Es primo el número 7?\u0026#34;, EsPrimo(7)) } Esta función es algo más difícil que las primeras porque contiene más de un return, pero es perfecta para entender lo sencillo que es escribir una lógica desde palabras humanas a una función.\nConclusión Si has llegado hasta aquí, espero que hayas entendido todo lo que hemos visto en este post. Si no, no te preocupes, podemos volver a leerlo las veces que quieras. Para no extender más el post, lo que voy a recomendarte es que, una vez entendidos todos los conceptos que se explican, vayas a la página https://gobyexample.com/ en la cual encontrarás más ejemplos que van escalando de dificultad pero que son cosas más potentes que te ayudarán a explotar al máximo tus conocimientos en programación.\nY no olvides compartir este post a tus compañeros que estén aprendiendo Go.\n","permalink":"https://arturo-source.github.io/es/posts/aprende-go-desde-cero/","summary":"¿Qué es una variable? ¿Cómo hacer un if? ¿Y un bucle? Aprende todo lo básico que necesitas para empezar a programar en un lenguaje tan sencillo como es Go.","title":"Aprende el lenguaje Go desde 0"}]